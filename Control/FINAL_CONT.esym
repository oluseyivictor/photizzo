D G "__PCM__" 0 180 ""5.061""
D G "__DEVICE__" 0 180 "876"
D G "__DATE__" 0 180 ""01-May-18""
D G "__TIME__" 0 180 ""02:46:30""
D G "_UNICODE" 0 180 ""?""
D G "__EVAL" 0 180 ""?"" "Standard Header file for the PIC16F876A device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 37 ""
v L "value" 2 37 "int8" `54 
f B "set_tris_a" 2 37 "void(int8 value)" `53 
f N "set_tris_b" 2 38 ""
v L "value" 2 38 "int8" `56 
f B "set_tris_b" 2 38 "void(int8 value)" `55 
f N "set_tris_c" 2 39 ""
v L "value" 2 39 "int8" `58 
f B "set_tris_c" 2 39 "void(int8 value)" `57 
f N "get_tris_a" 2 40 ""
f B "get_tris_a" 2 40 "int8()" `59 
f N "get_tris_b" 2 41 ""
f B "get_tris_b" 2 41 "int8()" `60 
f N "get_tris_c" 2 42 ""
f B "get_tris_c" 2 42 "int8()" `61 
f N "output_a" 2 43 ""
v L "value" 2 43 "int8" `63 
f B "output_a" 2 43 "void(int8 value)" `62 
f N "output_b" 2 44 ""
v L "value" 2 44 "int8" `65 
f B "output_b" 2 44 "void(int8 value)" `64 
f N "output_c" 2 45 ""
v L "value" 2 45 "int8" `67 
f B "output_c" 2 45 "void(int8 value)" `66 
f N "input_a" 2 46 ""
f B "input_a" 2 46 "int8()" `68 
f N "input_b" 2 47 ""
f B "input_b" 2 47 "int8()" `69 
f N "input_c" 2 48 ""
f B "input_c" 2 48 "int8()" `70 
f N "input_change_a" 2 49 ""
f B "input_change_a" 2 49 "int8()" `71 
f N "input_change_b" 2 50 ""
f B "input_change_b" 2 50 "int8()" `72 
f N "input_change_c" 2 51 ""
f B "input_change_c" 2 51 "int8()" `73 
f N "port_b_pullups" 2 52 ""
v L "value" 2 52 "int8" `75 
f B "port_b_pullups" 2 52 "void(int8 value)" `74 
f N "input" 2 53 ""
v L "pin" 2 53 "int16" `77 
f B "input" 2 53 "int8(int16 pin)" `76 
f N "input_state" 2 54 ""
v L "pin" 2 54 "int16" `79 
f B "input_state" 2 54 "int8(int16 pin)" `78 
f N "output_low" 2 55 ""
v L "pin" 2 55 "int16" `81 
f B "output_low" 2 55 "void(int16 pin)" `80 
f N "output_high" 2 56 ""
v L "pin" 2 56 "int16" `83 
f B "output_high" 2 56 "void(int16 pin)" `82 
f N "output_toggle" 2 57 ""
v L "pin" 2 57 "int16" `85 
f B "output_toggle" 2 57 "void(int16 pin)" `84 
f N "output_bit" 2 58 ""
v L "pin" 2 58 "int16" `87 
v L "level" 2 58 "int8" `88 
f B "output_bit" 2 58 "void(int16 pin,int8 level)" `86 
f N "output_float" 2 59 ""
v L "pin" 2 59 "int16" `90 
f B "output_float" 2 59 "void(int16 pin)" `89 
f N "output_drive" 2 60 ""
v L "pin" 2 60 "int16" `92 
f B "output_drive" 2 60 "void(int16 pin)" `91  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 64 "40"
d G "PIN_A1" 2 65 "41"
d G "PIN_A2" 2 66 "42"
d G "PIN_A3" 2 67 "43"
d G "PIN_A4" 2 68 "44"
d G "PIN_A5" 2 69 "45"
d G "PIN_B0" 2 71 "48"
d G "PIN_B1" 2 72 "49"
d G "PIN_B2" 2 73 "50"
d G "PIN_B3" 2 74 "51"
d G "PIN_B4" 2 75 "52"
d G "PIN_B5" 2 76 "53"
d G "PIN_B6" 2 77 "54"
d G "PIN_B7" 2 78 "55"
d G "PIN_C0" 2 80 "56"
d G "PIN_C1" 2 81 "57"
d G "PIN_C2" 2 82 "58"
d G "PIN_C3" 2 83 "59"
d G "PIN_C4" 2 84 "60"
d G "PIN_C5" 2 85 "61"
d G "PIN_C6" 2 86 "62"
d G "PIN_C7" 2 87 "63"
d G "FALSE" 2 90 "0"
d G "TRUE" 2 91 "1"
d G "BYTE" 2 93 "int8"
d G "BOOLEAN" 2 94 "int1"
d G "getc" 2 96 "getch"
d G "fgetc" 2 97 "getch"
d G "getchar" 2 98 "getch"
d G "putc" 2 99 "putchar"
d G "fputc" 2 100 "putchar"
d G "fgets" 2 101 "gets"
d G "fputs" 2 102 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 107 ""
f B "restart_cause" 2 107 "int8()" `93 
f N "reset_cpu" 2 108 ""
f B "reset_cpu" 2 108 "void()" `94 
f N "sleep" 2 109 ""
f B "sleep" 2 109 "void()" `95  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 111 "3"
d G "WDT_TIMEOUT" 2 112 "11"
d G "MCLR_FROM_SLEEP" 2 113 "19"
d G "MCLR_FROM_RUN" 2 114 "27"
d G "NORMAL_POWER_UP" 2 115 "25"
d G "BROWNOUT_RESTART" 2 116 "26"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 123 ""
v L "mode" 2 123 "int8" `97 
f B "setup_timer_0" 2 123 "void(int8 mode)" `96 
f N "set_timer0" 2 124 ""
v L "value" 2 124 "int8" `99 
f B "set_timer0" 2 124 "void(int8 value)" `98 
f N "get_timer0" 2 125 ""
f B "get_timer0" 2 125 "int8()" `100 
f N "setup_counters" 2 126 ""
v L "mode" 2 126 "int8" `102 
v L "prescaler" 2 126 "int8" `103 
f B "setup_counters" 2 126 "void(int8 mode,int8 prescaler)" `101 
f N "set_rtcc" 2 127 ""
v L "value" 2 127 "int8" `105 
f B "set_rtcc" 2 127 "void(int8 value)" `104 
f N "get_rtcc" 2 128 ""
f B "get_rtcc" 2 128 "int8()" `106  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 130 "0"
d G "T0_EXT_L_TO_H" 2 131 "32"
d G "T0_EXT_H_TO_L" 2 132 "48"
d G "T0_DIV_1" 2 134 "8"
d G "T0_DIV_2" 2 135 "0"
d G "T0_DIV_4" 2 136 "1"
d G "T0_DIV_8" 2 137 "2"
d G "T0_DIV_16" 2 138 "3"
d G "T0_DIV_32" 2 139 "4"
d G "T0_DIV_64" 2 140 "5"
d G "T0_DIV_128" 2 141 "6"
d G "T0_DIV_256" 2 142 "7"
d G "T0_8_BIT" 2 145 "0"
d G "RTCC_INTERNAL" 2 149 "0"
d G "RTCC_EXT_L_TO_H" 2 150 "32"
d G "RTCC_EXT_H_TO_L" 2 151 "48"
d G "RTCC_DIV_1" 2 152 "8"
d G "RTCC_DIV_2" 2 153 "0"
d G "RTCC_DIV_4" 2 154 "1"
d G "RTCC_DIV_8" 2 155 "2"
d G "RTCC_DIV_16" 2 156 "3"
d G "RTCC_DIV_32" 2 157 "4"
d G "RTCC_DIV_64" 2 158 "5"
d G "RTCC_DIV_128" 2 159 "6"
d G "RTCC_DIV_256" 2 160 "7"
d G "RTCC_8_BIT" 2 161 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 172 ""
v L "mode" 2 172 "int16" `108 
f B "setup_wdt" 2 172 "void(int16 mode)" `107 
f N "restart_wdt" 2 173 ""
f B "restart_wdt" 2 173 "void()" `109  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 176 "8"
d G "WDT_36MS" 2 177 "9"
d G "WDT_72MS" 2 178 "10"
d G "WDT_144MS" 2 179 "11"
d G "WDT_288MS" 2 180 "12"
d G "WDT_576MS" 2 181 "13"
d G "WDT_1152MS" 2 182 "14"
d G "WDT_2304MS" 2 183 "15"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 189 ""
v L "mode" 2 189 "int16" `111 
f B "setup_timer_1" 2 189 "void(int16 mode)" `110 
f N "get_timer1" 2 190 ""
f B "get_timer1" 2 190 "int16()" `112 
f N "set_timer1" 2 191 ""
v L "value" 2 191 "int16" `114 
f B "set_timer1" 2 191 "void(int16 value)" `113  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 194 "0"
d G "T1_INTERNAL" 2 195 "0x85"
d G "T1_EXTERNAL" 2 196 "0x87"
d G "T1_EXTERNAL_SYNC" 2 197 "0x83"
d G "T1_CLK_OUT" 2 199 "8"
d G "T1_DIV_BY_1" 2 201 "0"
d G "T1_DIV_BY_2" 2 202 "0x10"
d G "T1_DIV_BY_4" 2 203 "0x20"
d G "T1_DIV_BY_8" 2 204 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 209 ""
v L "mode" 2 209 "int8" `116 
v L "period" 2 209 "int8" `117 
v L "postscale" 2 209 "int8" `118 
f B "setup_timer_2" 2 209 "void(int8 mode,int8 period,int8 postscale)" `115 
f N "get_timer2" 2 210 ""
f B "get_timer2" 2 210 "int8()" `119 
f N "set_timer2" 2 211 ""
v L "value" 2 211 "int8" `121 
f B "set_timer2" 2 211 "void(int8 value)" `120  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 213 "0"
d G "T2_DIV_BY_1" 2 214 "4"
d G "T2_DIV_BY_4" 2 215 "5"
d G "T2_DIV_BY_16" 2 216 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 222 ""
v L "mode" 2 222 "int32" `123 
f B "setup_ccp1" 2 222 "void(int32 mode)" `122 
f N "setup_ccp1" 2 223 ""
v L "mode" 2 223 "int32" `125 
v L "pwm" 2 223 "int8" `126 
f B "setup_ccp1" 2 223 "void(int32 mode,int8 pwm)" `124 
f N "set_pwm1_duty" 2 224 ""
v L "value" 2 224 "int16" `128 
f B "set_pwm1_duty" 2 224 "void(int16 value)" `127  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 226 "0"
d G "CCP_CAPTURE_FE" 2 227 "0x04"
d G "CCP_CAPTURE_RE" 2 228 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 229 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 230 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 231 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 232 "0x09"
d G "CCP_COMPARE_INT" 2 233 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 234 "0x0B"
d G "CCP_PWM" 2 235 "0x0C"
d G "CCP_PWM_PLUS_1" 2 236 "0x1c"
d G "CCP_PWM_PLUS_2" 2 237 "0x2c"
d G "CCP_PWM_PLUS_3" 2 238 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 245 ""
v L "mode" 2 245 "int32" `133 
f B "setup_ccp2" 2 245 "void(int32 mode)" `132 
f N "setup_ccp2" 2 246 ""
v L "mode" 2 246 "int32" `135 
v L "pwm" 2 246 "int8" `136 
f B "setup_ccp2" 2 246 "void(int32 mode,int8 pwm)" `134 
f N "set_pwm2_duty" 2 247 ""
v L "value" 2 247 "int16" `138 
f B "set_pwm2_duty" 2 247 "void(int16 value)" `137 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 254 ""
v L "mode" 2 254 "int32" `143 
f B "setup_spi" 2 254 "void(int32 mode)" `142 
f N "spi_write" 2 255 ""
v L "value" 2 255 "int8" `145 
f B "spi_write" 2 255 "void(int8 value)" `144 
f N "spi_read" 2 256 ""
f B "spi_read" 2 256 "int8()" `146 
f N "spi_read" 2 257 ""
v L "value" 2 257 "int8" `148 
f B "spi_read" 2 257 "int8(int8 value)" `147 
f N "spi_data_is_in" 2 258 ""
f B "spi_data_is_in" 2 258 "int8()" `149  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 260 "0x00"
d G "SPI_MASTER" 2 261 "0x20"
d G "SPI_SLAVE" 2 262 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 263 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 264 "0x00"
d G "SPI_CLK_DIV_4" 2 265 "0x00"
d G "SPI_CLK_DIV_16" 2 266 "0x01"
d G "SPI_CLK_DIV_64" 2 267 "0x02"
d G "SPI_CLK_T2" 2 268 "0x03"
d G "SPI_SS_DISABLED" 2 269 "0x01"
d G "SPI_XMIT_L_TO_H" 2 271 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 272 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 274 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 275 "0x8000"
d G "SPI_L_TO_H" 2 278 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 279 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 283 ""
v L "baud" 2 283 "int32" `151 
f B "setup_uart" 2 283 "void(int32 baud)" `150 
f N "setup_uart" 2 284 ""
v L "baud" 2 284 "int32" `153 
v L "stream" 2 284 "int8" `154 
f B "setup_uart" 2 284 "void(int32 baud,int8 stream)" `152 
f N "setup_uart" 2 285 ""
v L "baud" 2 285 "int32" `156 
v L "stream" 2 285 "int8" `157 
v L "clock" 2 285 "int32" `158 
f B "setup_uart" 2 285 "void(int32 baud,int8 stream,int32 clock)" `155 
f N "set_uart_speed" 2 286 ""
v L "baud" 2 286 "int32" `160 
f B "set_uart_speed" 2 286 "void(int32 baud)" `159 
f N "set_uart_speed" 2 287 ""
v L "baud" 2 287 "int32" `162 
v L "stream" 2 287 "int8" `163 
f B "set_uart_speed" 2 287 "void(int32 baud,int8 stream)" `161 
f N "set_uart_speed" 2 288 ""
v L "baud" 2 288 "int32" `165 
v L "stream" 2 288 "int8" `166 
v L "clock" 2 288 "int32" `167 
f B "set_uart_speed" 2 288 "void(int32 baud,int8 stream,int32 clock)" `164  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 292 "2"
d G "UART_DATA" 2 293 "4"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 297 ""
v L "mode" 2 297 "int32" `169 
f B "setup_comparator" 2 297 "void(int32 mode)" `168  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 299 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 300 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 301 "0xbcf05"
d G "NC_NC_NC_NC" 2 302 "0x0ff07"
d G "A0_A3_A1_A2" 2 303 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 304 "0x9ef01"
d G "A0_VR_A1_VR" 2 305 "0x3ff06"
d G "A3_VR_A2_VR" 2 306 "0xcff0e"
d G "CP1_INVERT" 2 307 "0x0000010"
d G "CP2_INVERT" 2 308 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 315 ""
v L "mode" 2 315 "int8" `173 
f B "setup_vref" 2 315 "void(int8 mode)" `172  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 317 "0xa0"
d G "VREF_HIGH" 2 318 "0x80"
d G "VREF_A2" 2 320 "0x40"
c L "setup_vref" 2 3 4 "FUNCTION"
f N "setup_adc" 2 328 ""
v L "mode" 2 328 "int32" `175 
f B "setup_adc" 2 328 "void(int32 mode)" `174 
f N "read_adc" 2 329 ""
f B "read_adc" 2 329 "int8()" `176 
f N "read_adc" 2 330 ""
v L "mode" 2 330 "int8" `178 
f B "read_adc" 2 330 "int8(int8 mode)" `177 
f N "read_adc" 2 331 ""
f G "read_adc" 2 331 "int16()" `179 
f N "read_adc" 2 332 ""
v L "mode" 2 332 "int8" `180 
f G "read_adc" 2 332 "int16(int8 mode,int8 setting)" `179 
f N "adc_done" 2 333 ""
f B "adc_done" 2 333 "int8(int8 mode,int8 setting)" `179  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 335 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 336 "0x10000"
d G "ADC_CLOCK_DIV_4" 2 337 "0x4000"
d G "ADC_CLOCK_DIV_8" 2 338 "0x0040"
d G "ADC_CLOCK_DIV_16" 2 339 "0x4040"
d G "ADC_CLOCK_DIV_32" 2 340 "0x0080"
d G "ADC_CLOCK_DIV_64" 2 341 "0x4080"
d G "ADC_CLOCK_INTERNAL" 2 342 "0x00c0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 345 ""
v L "setting" 2 345 "int8" `181 
f B "setup_adc_ports" 2 345 "void(int8 setting)" `180 
f N "set_analog_pins" 2 346 ""
v L "setting" 2 346 "int8" `183 
f B "set_analog_pins" 2 346 "void(int8 setting)" `182 
f N "set_adc_channel" 2 347 ""
v L "channel" 2 347 "int8" `185 
f B "set_adc_channel" 2 347 "void(int8 channel)" `184  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 2 349 "7" "None"
d G "ALL_ANALOG" 2 350 "0" "A0 A1 A2 A3 A4"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 351 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 2 352 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 353 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_VREF_VREF" 2 354 "0x08" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 2 355 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 2 356 "0x0E" "A0"
d G "AN0_VREF_VREF" 2 357 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 2 358 "0x1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 359 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 360 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 2 361 "0x8" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 2 362 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 2 363 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 2 364 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 367 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 368 "1"
d G "ADC_READ_ONLY" 2 369 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 375 ""
v L "x" 2 375 "sint8" `187 
f B "abs" 2 375 "sint8(sint8 x)" `186 
f N "abs" 2 376 ""
v L "x" 2 376 "sint16" `189 
f B "abs" 2 376 "sint16(sint16 x)" `188 
f N "abs" 2 377 ""
v L "x" 2 377 "sint32" `191 
f B "abs" 2 377 "sint32(sint32 x)" `190 
f N "abs" 2 378 ""
v L "x" 2 378 "float" `193 
f B "abs" 2 378 "float(float x)" `192 
f N "_mul" 2 379 ""
v L "??65535" 2 379 "int8" `195 
v L "??65535" 2 379 "int8" `196 
f B "_mul" 2 379 "int16(int8 ,int8 )" `194 
f N "_mul" 2 380 ""
v L "??65535" 2 380 "sint8" `198 
v L "??65535" 2 380 "sint8" `199 
f B "_mul" 2 380 "sint16(sint8 ,sint8 )" `197 
f N "_mul" 2 381 ""
v L "??65535" 2 381 "int16" `201 
v L "??65535" 2 381 "int16" `202 
f B "_mul" 2 381 "int32(int16 ,int16 )" `200 
f N "_mul" 2 382 ""
v L "??65535" 2 382 "sint16" `204 
v L "??65535" 2 382 "sint16" `205 
f B "_mul" 2 382 "sint32(sint16 ,sint16 )" `203  "Memory Manipulation Prototypes:"
f N "read_bank" 2 385 ""
v L "bank" 2 385 "int8" `207 
v L "offset" 2 385 "int8" `208 
f B "read_bank" 2 385 "int8(int8 bank,int8 offset)" `206 
f N "write_bank" 2 386 ""
v L "bank" 2 386 "int8" `210 
v L "offset" 2 386 "int8" `211 
v L "value" 2 386 "int8" `212 
f B "write_bank" 2 386 "void(int8 bank,int8 offset,int8 value)" `209 
f N "strcpy" 2 387 ""
v L "dest" 2 387 "*int8" `214 
v L "src" 2 387 "*int8" `215 
f B "strcpy" 2 387 "void(*int8 dest,*int8 src)" `213 
f N "memset" 2 388 ""
v L "destination" 2 388 "*int8" `217 
v L "value" 2 388 "int8" `218 
v L "num" 2 388 "int16" `219 
f B "memset" 2 388 "void(*int8 destination,int8 value,int16 num)" `216 
f N "memcpy" 2 389 ""
v L "destination" 2 389 "*int8" `221 
v L "source" 2 389 "*int8" `222 
v L "num" 2 389 "int16" `223 
f B "memcpy" 2 389 "void(*int8 destination,*int8 source,int16 num)" `220  "String Prototypes:"
f N "toupper" 2 392 ""
v L "cvalue" 2 392 "int8" `225 
f B "toupper" 2 392 "int8(int8 cvalue)" `224 
f N "tolower" 2 393 ""
v L "cvalue" 2 393 "int8" `227 
f B "tolower" 2 393 "int8(int8 cvalue)" `226 
f N "sprintf" 2 394 ""
v L "string" 2 394 "*int8" `229 
v L "cstring" 2 394 "*int8" `230 
f B "sprintf" 2 394 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `228  "Data Manipulators Prototypes:"
f N "shift_left" 2 397 ""
v L "address" 2 397 "*int8" `233 
v L "bytes" 2 397 "int8" `234 
v L "value" 2 397 "int8" `235 
f B "shift_left" 2 397 "int8(*int8 address,int8 bytes,int8 value)" `232 
f N "shift_right" 2 398 ""
v L "address" 2 398 "*int8" `237 
v L "bytes" 2 398 "int8" `238 
v L "value" 2 398 "int8" `239 
f B "shift_right" 2 398 "int8(*int8 address,int8 bytes,int8 value)" `236 
f N "rotate_left" 2 399 ""
v L "address" 2 399 "*int8" `241 
v L "bytes" 2 399 "int8" `242 
f B "rotate_left" 2 399 "void(*int8 address,int8 bytes)" `240 
f N "rotate_right" 2 400 ""
v L "address" 2 400 "*int8" `244 
v L "bytes" 2 400 "int8" `245 
f B "rotate_right" 2 400 "void(*int8 address,int8 bytes)" `243 
f N "swap" 2 401 ""
v L "value" 2 401 "int8" `247 
f B "swap" 2 401 "void(int8 value)" `246 
f N "make8" 2 402 ""
v L "var" 2 402 "int16" `249 
v L "offset" 2 402 "int8" `250 
f B "make8" 2 402 "int8(int16 var,int8 offset)" `248 
f N "make8" 2 403 ""
v L "var" 2 403 "int32" `252 
v L "offset" 2 403 "int8" `253 
f B "make8" 2 403 "int8(int32 var,int8 offset)" `251 
f N "make16" 2 404 ""
v L "varhigh" 2 404 "int8" `255 
v L "varlow" 2 404 "int8" `256 
f B "make16" 2 404 "int16(int8 varhigh,int8 varlow)" `254 
f N "make32" 2 405 ""
v L "var1" 2 405 "int16" `258 
f B "make32" 2 405 "int32(int16 var1)" `257 
f N "make32" 2 406 ""
v L "var1" 2 406 "int16" `260 
v L "var2" 2 406 "int16" `261 
f B "make32" 2 406 "int32(int16 var1,int16 var2)" `259 
f N "make32" 2 407 ""
v L "var1" 2 407 "int16" `263 
v L "var2" 2 407 "int8" `264 
f B "make32" 2 407 "int32(int16 var1,int8 var2)" `262 
f N "make32" 2 408 ""
v L "var1" 2 408 "int16" `266 
v L "var2" 2 408 "int8" `267 
v L "var3" 2 408 "int8" `268 
f B "make32" 2 408 "int32(int16 var1,int8 var2,int8 var3)" `265 
f N "make32" 2 409 ""
v L "var1" 2 409 "int8" `270 
f B "make32" 2 409 "int32(int8 var1)" `269 
f N "make32" 2 410 ""
v L "var1" 2 410 "int8" `272 
v L "var2" 2 410 "int8" `273 
f B "make32" 2 410 "int32(int8 var1,int8 var2)" `271 
f N "make32" 2 411 ""
v L "var1" 2 411 "int8" `275 
v L "var2" 2 411 "int8" `276 
v L "var3" 2 411 "int8" `277 
f B "make32" 2 411 "int32(int8 var1,int8 var2,int8 var3)" `274 
f N "make32" 2 412 ""
v L "var1" 2 412 "int8" `279 
v L "var2" 2 412 "int8" `280 
v L "var3" 2 412 "int8" `281 
v L "var4" 2 412 "int8" `282 
f B "make32" 2 412 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `278 
f N "make32" 2 413 ""
v L "var1" 2 413 "int8" `284 
v L "var2" 2 413 "int16" `285 
f B "make32" 2 413 "int32(int8 var1,int16 var2)" `283 
f N "make32" 2 414 ""
v L "var1" 2 414 "int8" `287 
v L "var2" 2 414 "int16" `288 
v L "var3" 2 414 "int8" `289 
f B "make32" 2 414 "int32(int8 var1,int16 var2,int8 var3)" `286 
f N "make32" 2 415 ""
v L "var1" 2 415 "int8" `291 
v L "var2" 2 415 "int8" `292 
v L "var3" 2 415 "int16" `293 
f B "make32" 2 415 "int32(int8 var1,int8 var2,int16 var3)" `290 
f N "bit_set" 2 416 ""
v L "var" 2 416 "int8" `295 
v L "bit" 2 416 "int8" `296 
f B "bit_set" 2 416 "void(int8 var,int8 bit)" `294 
f N "bit_set" 2 417 ""
v L "var" 2 417 "int16" `298 
v L "bit" 2 417 "int8" `299 
f B "bit_set" 2 417 "void(int16 var,int8 bit)" `297 
f N "bit_set" 2 418 ""
v L "var" 2 418 "int32" `301 
v L "bit" 2 418 "int8" `302 
f B "bit_set" 2 418 "void(int32 var,int8 bit)" `300 
f N "bit_clear" 2 419 ""
v L "var" 2 419 "int8" `304 
v L "bit" 2 419 "int8" `305 
f B "bit_clear" 2 419 "void(int8 var,int8 bit)" `303 
f N "bit_clear" 2 420 ""
v L "var" 2 420 "int16" `307 
v L "bit" 2 420 "int8" `308 
f B "bit_clear" 2 420 "void(int16 var,int8 bit)" `306 
f N "bit_clear" 2 421 ""
v L "var" 2 421 "int32" `310 
v L "bit" 2 421 "int8" `311 
f B "bit_clear" 2 421 "void(int32 var,int8 bit)" `309 
f N "bit_test" 2 422 ""
v L "var" 2 422 "int8" `313 
v L "bit" 2 422 "int8" `314 
f B "bit_test" 2 422 "int8(int8 var,int8 bit)" `312 
f N "bit_test" 2 423 ""
v L "var" 2 423 "int16" `316 
v L "bit" 2 423 "int8" `317 
f B "bit_test" 2 423 "int8(int16 var,int8 bit)" `315 
f N "bit_test" 2 424 ""
v L "var" 2 424 "int32" `319 
v L "bit" 2 424 "int8" `320 
f B "bit_test" 2 424 "int8(int32 var,int8 bit)" `318  "#use delay() Prototypes:"
f N "delay_cycles" 2 427 ""
v L "count" 2 427 "int8" `322 
f B "delay_cycles" 2 427 "void(int8 count)" `321 
f N "delay_ms" 2 428 ""
v L "time" 2 428 "int16" `324 
f B "delay_ms" 2 428 "void(int16 time)" `323 
f N "delay_us" 2 429 ""
v L "time" 2 429 "int16" `326 
f B "delay_us" 2 429 "void(int16 time)" `325  "#use rs232() Prototypes:"
f N "putchar" 2 432 ""
v L "cdata" 2 432 "int8" `328 
f B "putchar" 2 432 "void(int8 cdata)" `327 
f N "putchar" 2 433 ""
v L "cdata" 2 433 "int8" `330 
v L "stream" 2 433 "int8" `331 
f B "putchar" 2 433 "void(int8 cdata,int8 stream)" `329 
f N "puts" 2 434 ""
v L "string" 2 434 "*int8" `333 
f B "puts" 2 434 "void(*int8 string)" `332 
f N "puts" 2 435 ""
v L "string" 2 435 "*int8" `335 
v L "stream" 2 435 "int8" `336 
f B "puts" 2 435 "void(*int8 string,int8 stream)" `334 
f N "getch" 2 436 ""
f B "getch" 2 436 "int8()" `337 
f N "getch" 2 437 ""
v L "stream" 2 437 "int8" `339 
f B "getch" 2 437 "int8(int8 stream)" `338 
f N "gets" 2 438 ""
v L "string" 2 438 "*int8" `341 
f B "gets" 2 438 "void(*int8 string)" `340 
f N "gets" 2 439 ""
v L "string" 2 439 "*int8" `343 
v L "stream" 2 439 "int8" `344 
f B "gets" 2 439 "void(*int8 string,int8 stream)" `342 
f N "kbhit" 2 440 ""
f B "kbhit" 2 440 "int8()" `345 
f N "kbhit" 2 441 ""
v L "stream" 2 441 "int8" `347 
f B "kbhit" 2 441 "int8(int8 stream)" `346 
f N "printf" 2 442 ""
v L "string" 2 442 "*int8" `349 
f B "printf" 2 442 "void(*int8 string,*int8 _VA_LIST)" `348 
f N "fprintf" 2 443 ""
v L "stream" 2 443 "int8" `352 
v L "string" 2 443 "*int8" `353 
f B "fprintf" 2 443 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `351 
f N "putc_send" 2 444 ""
f B "putc_send" 2 444 "void()" `355 
f N "fputc_send" 2 445 ""
v L "stream" 2 445 "int8" `357 
f B "fputc_send" 2 445 "void(int8 stream)" `356 
f N "rcv_buffer_full" 2 446 ""
f B "rcv_buffer_full" 2 446 "int8()" `358 
f N "rcv_buffer_full" 2 447 ""
v L "stream" 2 447 "int8" `360 
f B "rcv_buffer_full" 2 447 "int8(int8 stream)" `359 
f N "rcv_buffer_bytes" 2 448 ""
f B "rcv_buffer_bytes" 2 448 "int16()" `361 
f N "rcv_buffer_bytes" 2 449 ""
v L "stream" 2 449 "int8" `363 
f B "rcv_buffer_bytes" 2 449 "int16(int8 stream)" `362 
f N "tx_buffer_full" 2 450 ""
f B "tx_buffer_full" 2 450 "int8()" `364 
f N "tx_buffer_full" 2 451 ""
v L "stream" 2 451 "int8" `366 
f B "tx_buffer_full" 2 451 "int8(int8 stream)" `365 
f N "tx_buffer_bytes" 2 452 ""
f B "tx_buffer_bytes" 2 452 "int16()" `367 
f N "tx_buffer_bytes" 2 453 ""
v L "stream" 2 453 "int8" `369 
f B "tx_buffer_bytes" 2 453 "int16(int8 stream)" `368  "#use i2c() Prototypes:"
f N "i2c_read" 2 456 ""
f B "i2c_read" 2 456 "int8()" `370 
f N "i2c_read" 2 457 ""
v L "ack" 2 457 "int8" `372 
f B "i2c_read" 2 457 "int8(int8 ack)" `371 
f N "i2c_read" 2 458 ""
v L "stream" 2 458 "int8" `374 
v L "ack" 2 458 "int8" `375 
f B "i2c_read" 2 458 "int8(int8 stream,int8 ack)" `373 
f N "i2c_write" 2 459 ""
v L "data" 2 459 "int8" `377 
f B "i2c_write" 2 459 "int8(int8 data)" `376 
f N "i2c_write" 2 460 ""
v L "stream" 2 460 "int8" `379 
v L "data" 2 460 "int8" `380 
f B "i2c_write" 2 460 "int8(int8 stream,int8 data)" `378 
f N "i2c_start" 2 461 ""
f B "i2c_start" 2 461 "void()" `381 
f N "i2c_start" 2 462 ""
v L "stream" 2 462 "int8" `383 
f B "i2c_start" 2 462 "void(int8 stream)" `382 
f N "i2c_start" 2 463 ""
v L "stream" 2 463 "int8" `385 
v L "restart" 2 463 "int8" `386 
f B "i2c_start" 2 463 "void(int8 stream,int8 restart)" `384 
f N "i2c_stop" 2 464 ""
f B "i2c_stop" 2 464 "void()" `387 
f N "i2c_stop" 2 465 ""
v L "stream" 2 465 "int8" `389 
f B "i2c_stop" 2 465 "void(int8 stream)" `388 
f N "i2c_isr_state" 2 466 ""
f B "i2c_isr_state" 2 466 "int8()" `390 
f N "i2c_slaveaddr" 2 467 ""
v L "addr" 2 467 "int8" `392 
f B "i2c_slaveaddr" 2 467 "void(int8 addr)" `391 
f N "i2c_slaveaddr" 2 468 ""
v L "stream" 2 468 "int8" `394 
v L "addr" 2 468 "int8" `395 
f B "i2c_slaveaddr" 2 468 "void(int8 stream,int8 addr)" `393 
f N "i2c_poll" 2 469 ""
f B "i2c_poll" 2 469 "int8()" `396 
f N "i2c_poll" 2 470 ""
v L "stream" 2 470 "int8" `398 
f B "i2c_poll" 2 470 "int8(int8 stream)" `397 
f N "i2c_init" 2 471 ""
v L "baud" 2 471 "int32" `400 
f B "i2c_init" 2 471 "void(int32 baud)" `399 
f N "i2c_init" 2 472 ""
v L "stream" 2 472 "int8" `402 
v L "baud" 2 472 "int32" `403 
f B "i2c_init" 2 472 "void(int8 stream,int32 baud)" `401  "#use spi() Prototypes:"
f N "spi_xfer" 2 475 ""
f B "spi_xfer" 2 475 "int8()" `404 
f N "spi_xfer" 2 476 ""
f G "spi_xfer" 2 476 "int16(int8 data)" `405 
f N "spi_xfer" 2 477 ""
f G "spi_xfer" 2 477 "int32(int8 data)" `405 
f N "spi_xfer" 2 478 ""
v L "data" 2 478 "int8" `406 
f B "spi_xfer" 2 478 "int8(int8 data)" `405 
f N "spi_xfer" 2 479 ""
v L "data" 2 479 "int16" `408 
f B "spi_xfer" 2 479 "int16(int16 data)" `407 
f N "spi_xfer" 2 480 ""
v L "data" 2 480 "int32" `410 
f B "spi_xfer" 2 480 "int32(int32 data)" `409 
f N "spi_xfer" 2 481 ""
v L "stream" 2 481 "int8" `412 
v L "data" 2 481 "int8" `413 
f B "spi_xfer" 2 481 "int8(int8 stream,int8 data)" `411 
f N "spi_xfer" 2 482 ""
v L "stream" 2 482 "int8" `415 
v L "data" 2 482 "int16" `416 
f B "spi_xfer" 2 482 "int16(int8 stream,int16 data)" `414 
f N "spi_xfer" 2 483 ""
v L "stream" 2 483 "int8" `418 
v L "data" 2 483 "int32" `419 
f B "spi_xfer" 2 483 "int32(int8 stream,int32 data)" `417 
f N "spi_xfer" 2 484 ""
v L "stream" 2 484 "int8" `421 
v L "data" 2 484 "int8" `422 
v L "bits" 2 484 "int8" `423 
f B "spi_xfer" 2 484 "int8(int8 stream,int8 data,int8 bits)" `420 
f N "spi_xfer" 2 485 ""
v L "stream" 2 485 "int8" `425 
v L "data" 2 485 "int16" `426 
v L "bits" 2 485 "int8" `427 
f B "spi_xfer" 2 485 "int16(int8 stream,int16 data,int8 bits)" `424 
f N "spi_xfer" 2 486 ""
v L "stream" 2 486 "int8" `429 
v L "data" 2 486 "int32" `430 
v L "bits" 2 486 "int8" `431 
f B "spi_xfer" 2 486 "int32(int8 stream,int32 data,int8 bits)" `428 
f N "spi_init" 2 487 ""
v L "baud" 2 487 "int32" `433 
f B "spi_init" 2 487 "void(int32 baud)" `432 
f N "spi_init" 2 488 ""
v L "stream" 2 488 "int8" `435 
v L "baud" 2 488 "int32" `436 
f B "spi_init" 2 488 "void(int8 stream,int32 baud)" `434 
f N "spi_speed" 2 489 ""
v L "baud" 2 489 "int32" `438 
f B "spi_speed" 2 489 "void(int32 baud)" `437 
f N "spi_speed" 2 490 ""
v L "stream" 2 490 "int8" `440 
v L "baud" 2 490 "int32" `441 
f B "spi_speed" 2 490 "void(int8 stream,int32 baud)" `439 
f N "spi_speed" 2 491 ""
v L "stream" 2 491 "int8" `443 
v L "baud" 2 491 "int32" `444 
v L "clock" 2 491 "int32" `445 
f B "spi_speed" 2 491 "void(int8 stream,int32 baud,int32 clock)" `442 
f N "spi_prewrite" 2 492 ""
v L "data" 2 492 "int8" `447 
f B "spi_prewrite" 2 492 "void(int8 data)" `446 
f N "spi_prewrite" 2 493 ""
v L "data" 2 493 "int16" `449 
f B "spi_prewrite" 2 493 "void(int16 data)" `448 
f N "spi_prewrite" 2 494 ""
v L "data" 2 494 "int32" `451 
f B "spi_prewrite" 2 494 "void(int32 data)" `450 
f N "spi_prewrite" 2 495 ""
v L "??65535" 2 495 "int8" `453 
v L "data" 2 495 "int8" `454 
f B "spi_prewrite" 2 495 "void(int8 ,int8 data)" `452 
f N "spi_prewrite" 2 496 ""
v L "??65535" 2 496 "int8" `456 
v L "data" 2 496 "int16" `457 
f B "spi_prewrite" 2 496 "void(int8 ,int16 data)" `455 
f N "spi_prewrite" 2 497 ""
v L "??65535" 2 497 "int8" `459 
v L "data" 2 497 "int32" `460 
f B "spi_prewrite" 2 497 "void(int8 ,int32 data)" `458 
f N "spi_xfer_in" 2 498 ""
f B "spi_xfer_in" 2 498 "int8()" `461 
f N "spi_xfer_in" 2 499 ""
f G "spi_xfer_in" 2 499 "int16(int8 bits)" `462 
f N "spi_xfer_in" 2 500 ""
f G "spi_xfer_in" 2 500 "int32(int8 bits)" `462 
f N "spi_xfer_in" 2 501 ""
v L "bits" 2 501 "int8" `463 
f B "spi_xfer_in" 2 501 "int8(int8 bits)" `462 
f N "spi_xfer_in" 2 502 ""
v L "bits" 2 502 "int8" `465 
f G "spi_xfer_in" 2 502 "int16(int8 bits,int8 bits)" `464 
f N "spi_xfer_in" 2 503 ""
v L "bits" 2 503 "int8" `465 
f G "spi_xfer_in" 2 503 "int32(int8 bits,int8 bits)" `464 
f N "spi_xfer_in" 2 504 ""
v L "stream" 2 504 "int8" `465 
v L "bits" 2 504 "int8" `466 
f B "spi_xfer_in" 2 504 "int8(int8 stream,int8 bits)" `464 
f N "spi_xfer_in" 2 505 ""
v L "stream" 2 505 "int8" `465 
v L "bits" 2 505 "int8" `469 
f G "spi_xfer_in" 2 505 "int16(int8 stream,int8 bits,int8 task)" `467 
f N "spi_xfer_in" 2 506 ""
v L "stream" 2 506 "int8" `465 
v L "bits" 2 506 "int8" `469 
f G "spi_xfer_in" 2 506 "int32(int8 stream,int8 bits,int8 task)" `467  "#use rtos() Prototypes:"
f N "rtos_run" 2 509 ""
f B "rtos_run" 2 509 "void(int8 stream,int8 bits,int8 task)" `467 
f N "rtos_yield" 2 510 ""
f B "rtos_yield" 2 510 "void(int8 bits,int8 task)" `468 
f N "rtos_enable" 2 511 ""
v L "task" 2 511 "int8" `470 
f B "rtos_enable" 2 511 "void(int8 task)" `469 
f N "rtos_disable" 2 512 ""
v L "task" 2 512 "int8" `472 
f B "rtos_disable" 2 512 "void(int8 task)" `471 
f N "rtos_terminate" 2 513 ""
f B "rtos_terminate" 2 513 "void()" `473 
f N "rtos_await" 2 514 ""
v L "flag" 2 514 "int8" `475 
f B "rtos_await" 2 514 "void(int8 flag)" `474 
f N "rtos_wait" 2 515 ""
v L "sem" 2 515 "int8" `477 
f B "rtos_wait" 2 515 "void(int8 sem)" `476 
f N "rtos_signal" 2 516 ""
v L "sem" 2 516 "int8" `479 
f B "rtos_signal" 2 516 "void(int8 sem)" `478 
f N "rtos_msg_send" 2 517 ""
v L "task" 2 517 "int8" `481 
v L "msg" 2 517 "int8" `482 
f B "rtos_msg_send" 2 517 "void(int8 task,int8 msg)" `480 
f N "rtos_msg_read" 2 518 ""
f B "rtos_msg_read" 2 518 "int8()" `483 
f N "rtos_msg_poll" 2 519 ""
f B "rtos_msg_poll" 2 519 "int8()" `484 
f N "rtos_overrun" 2 520 ""
v L "task" 2 520 "int8" `486 
f B "rtos_overrun" 2 520 "int8(int8 task)" `485 
f N "rtos_stats" 2 521 ""
v L "task" 2 521 "int8" `488 
v L "stat" 2 521 "*int8" `489 
f B "rtos_stats" 2 521 "void(int8 task,*int8 stat)" `487  "#use timer() Prototypes:"
f N "get_ticks" 2 524 ""
f B "get_ticks" 2 524 "int8()" `490 
f N "get_ticks" 2 525 ""
f G "get_ticks" 2 525 "int16(int8 stream)" `491 
f N "get_ticks" 2 526 ""
f G "get_ticks" 2 526 "int32(int8 stream)" `491 
f N "get_ticks" 2 527 ""
v L "stream" 2 527 "int8" `492 
f B "get_ticks" 2 527 "int8(int8 stream)" `491 
f N "get_ticks" 2 528 ""
v L "stream" 2 528 "int8" `494 
f G "get_ticks" 2 528 "int16(int8 stream)" `493 
f N "get_ticks" 2 529 ""
v L "stream" 2 529 "int8" `494 
f G "get_ticks" 2 529 "int32(int8 stream)" `493 
f N "set_ticks" 2 530 ""
v L "value" 2 530 "int8" `494 
f B "set_ticks" 2 530 "void(int8 value)" `493 
f N "set_ticks" 2 531 ""
v L "value" 2 531 "int16" `496 
f B "set_ticks" 2 531 "void(int16 value)" `495 
f N "set_ticks" 2 532 ""
v L "value" 2 532 "int32" `498 
f B "set_ticks" 2 532 "void(int32 value)" `497 
f N "set_ticks" 2 533 ""
v L "stream" 2 533 "int8" `500 
v L "value" 2 533 "int8" `501 
f B "set_ticks" 2 533 "void(int8 stream,int8 value)" `499 
f N "set_ticks" 2 534 ""
v L "stream" 2 534 "int8" `503 
v L "value" 2 534 "int16" `504 
f B "set_ticks" 2 534 "void(int8 stream,int16 value)" `502 
f N "set_ticks" 2 535 ""
v L "stream" 2 535 "int8" `506 
v L "value" 2 535 "int32" `507 
f B "set_ticks" 2 535 "void(int8 stream,int32 value)" `505  "#use pwm() Prototypes:"
f N "pwm_on" 2 538 ""
f B "pwm_on" 2 538 "void()" `508 
f N "pwm_on" 2 539 ""
v L "stream" 2 539 "int8" `510 
f B "pwm_on" 2 539 "void(int8 stream)" `509 
f N "pwm_off" 2 540 ""
f B "pwm_off" 2 540 "void()" `511 
f N "pwm_off" 2 541 ""
v L "stream" 2 541 "int8" `513 
f B "pwm_off" 2 541 "void(int8 stream)" `512 
f N "pwm_set_duty" 2 542 ""
v L "duty" 2 542 "int16" `515 
f B "pwm_set_duty" 2 542 "void(int16 duty)" `514 
f N "pwm_set_duty" 2 543 ""
v L "stream" 2 543 "int8" `517 
v L "duty" 2 543 "int16" `518 
f B "pwm_set_duty" 2 543 "void(int8 stream,int16 duty)" `516 
f N "pwm_set_duty_percent" 2 544 ""
v L "percent" 2 544 "int16" `520 
f B "pwm_set_duty_percent" 2 544 "void(int16 percent)" `519 
f N "pwm_set_duty_percent" 2 545 ""
v L "stream" 2 545 "int8" `522 
v L "percent" 2 545 "int16" `523 
f B "pwm_set_duty_percent" 2 545 "void(int8 stream,int16 percent)" `521 
f N "pwm_set_frequency" 2 546 ""
v L "frequency" 2 546 "int32" `525 
f B "pwm_set_frequency" 2 546 "void(int32 frequency)" `524 
f N "pwm_set_frequency" 2 547 ""
v L "stream" 2 547 "int8" `527 
v L "frequency" 2 547 "int32" `528 
f B "pwm_set_frequency" 2 547 "void(int8 stream,int32 frequency)" `526  "#use capture() Prototypes:"
f N "get_capture_time" 2 550 ""
f B "get_capture_time" 2 550 "int16()" `529 
f N "get_capture_time" 2 551 ""
v L "stream" 2 551 "int8" `531 
f B "get_capture_time" 2 551 "int16(int8 stream)" `530 
f N "get_capture_event" 2 552 ""
f B "get_capture_event" 2 552 "int8()" `532 
f N "get_capture_event" 2 553 ""
v L "stream" 2 553 "int8" `534 
f B "get_capture_event" 2 553 "int8(int8 stream)" `533  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 566 ""
v L "address" 2 566 "int16" `536 
f B "goto_address" 2 566 "void(int16 address)" `535 
f N "label_address" 2 567 ""
v L "label" 2 567 "int16" `538 
f B "label_address" 2 567 "int16(int16 label)" `537  "Program Memory Prototypes:"
f N "read_program_memory" 2 570 ""
v L "address" 2 570 "int16" `540 
v L "dataptr" 2 570 "*int8" `541 
v L "count" 2 570 "int16" `542 
f B "read_program_memory" 2 570 "void(int16 address,*int8 dataptr,int16 count)" `539 
f N "read_program_eeprom" 2 571 ""
v L "address" 2 571 "int16" `544 
f B "read_program_eeprom" 2 571 "int16(int16 address)" `543 
f N "write_program_memory" 2 572 ""
v L "address" 2 572 "int16" `546 
v L "dataptr" 2 572 "*int8" `547 
v L "count" 2 572 "int16" `548 
f B "write_program_memory" 2 572 "void(int16 address,*int8 dataptr,int16 count)" `545 
f N "write_program_eeprom" 2 573 ""
v L "address" 2 573 "int16" `550 
v L "data" 2 573 "int16" `551 
f B "write_program_eeprom" 2 573 "void(int16 address,int16 data)" `549  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 578 "unsigned int16"
f N "read_eeprom" 2 583 ""
v L "address" 2 583 "int16" `553 
f B "read_eeprom" 2 583 "int8(int16 address)" `552 
f N "write_eeprom" 2 584 ""
v L "address" 2 584 "int16" `555 
v L "value" 2 584 "int8" `556 
f B "write_eeprom" 2 584 "void(int16 address,int8 value)" `554  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 591 ""
v L "interrupt" 2 591 "int32" `558 
f B "enable_interrupts" 2 591 "void(int32 interrupt)" `557 
f N "disable_interrupts" 2 592 ""
v L "interrupt" 2 592 "int32" `560 
f B "disable_interrupts" 2 592 "void(int32 interrupt)" `559 
f N "clear_interrupt" 2 593 ""
v L "interrupt" 2 593 "int32" `562 
f B "clear_interrupt" 2 593 "void(int32 interrupt)" `561 
f N "interrupt_active" 2 594 ""
v L "interrupt" 2 594 "int32" `564 
f B "interrupt_active" 2 594 "int8(int32 interrupt)" `563 
f N "interrupt_enabled" 2 595 ""
v L "interrupt" 2 595 "int32" `566 
f B "interrupt_enabled" 2 595 "int8(int32 interrupt)" `565 
f N "ext_int_edge" 2 596 ""
v L "source" 2 596 "int8" `568 
v L "edge" 2 596 "int8" `569 
f B "ext_int_edge" 2 596 "void(int8 source,int8 edge)" `567 
f N "jump_to_isr" 2 597 ""
v L "address" 2 597 "int16" `571 
f B "jump_to_isr" 2 597 "void(int16 address)" `570  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 599 "0x40"
d G "H_TO_L" 2 600 "0"
d G "GLOBAL" 2 602 "0x0BC0"
d G "PERIPH" 2 603 "0x0B40"
d G "INT_RTCC" 2 604 "0x000B20"
d G "INT_RB" 2 605 "0x00FF0B08"
d G "INT_EXT_L2H" 2 606 "0x50000B10"
d G "INT_EXT_H2L" 2 607 "0x60000B10"
d G "INT_EXT" 2 608 "0x000B10"
d G "INT_AD" 2 609 "0x008C40"
d G "INT_TBE" 2 610 "0x008C10"
d G "INT_RDA" 2 611 "0x008C20"
d G "INT_TIMER1" 2 612 "0x008C01"
d G "INT_TIMER2" 2 613 "0x008C02"
d G "INT_CCP1" 2 614 "0x008C04"
d G "INT_CCP2" 2 615 "0x008D01"
d G "INT_SSP" 2 616 "0x008C08"
d G "INT_BUSCOL" 2 617 "0x008D08"
d G "INT_EEPROM" 2 618 "0x008D10"
d G "INT_TIMER0" 2 619 "0x000B20"
d G "INT_COMP" 2 620 "0x008D40"
C L "jump_to_isr" 1 5 1 "FUNCTION"
D G "BUFFER_SIZE" 0 4 "32"
V G "buffer" 0 5 "int8[32]" `583 
V G "next_in" 0 6 "int8" `584 
V G "next_out" 0 7 "int8" `585 
V G "write" 0 8 "int1" `586 
V G "state" 0 8 "int1" `587 
V G "value" 0 9 "int16[5]" `588 
V G "i" 0 10 "int8" `589 
V G "j" 0 10 "int8" `590 
V G "readValue" 0 11 "int16" `591 
V G "count" 0 11 "int16" `592  "value read from the sensor"
C L "jump_to_isr" 0 2 1 "FUNCTION"
V G "Voltage" 0 15 "float" `593 
V G "VRMS" 0 16 "float" `594 
V G "AmpsRMS" 0 17 "float" `595 
V G "Boost_output" 0 18 "float" `596 
V G "Inverter_output" 0 18 "float" `597 
V G "batt_status" 0 19 "int1" `598 
V G "load_status" 0 19 "int1" `599 
V G "data" 0 20 "float" `600  "#int_rda"
C L "jump_to_isr" 0 2 40 "FUNCTION"
F N "main" 0 95 ""
F G "main" 0 95 "void()" `601 
C L "main" 0 2 1 "FUNCTION"
C L "main" 0 2 2 "FUNCTION"
C L "main" 0 2 1 "FUNCTION"
C L "main" 0 2 1 "FUNCTION"
C L "main" 0 2 2 "FUNCTION"
C L "main" 0 2 1 "FUNCTION"
C L "main" 0 2 1 "FUNCTION"
C L "main" 0 2 1 "FUNCTION"
C L "main" 0 2 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
