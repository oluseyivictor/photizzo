C L "MAIN" 0 50 1 "FUNCTION"
D G "__PCH__" 0 83 ""5.061""
D G "__DEVICE__" 0 83 "2550"
D G "__DATE__" 0 83 ""16-May-18""
D G "__TIME__" 0 83 ""16:08:20""
D G "_UNICODE" 0 83 ""?""
D G "__EVAL" 0 83 ""?"" "Standard Header file for the PIC18F2550 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 45 ""
v L "value" 2 45 "int8" `54 
f B "set_tris_a" 2 45 "void(int8 value)" `53 
f N "set_tris_b" 2 46 ""
v L "value" 2 46 "int8" `56 
f B "set_tris_b" 2 46 "void(int8 value)" `55 
f N "set_tris_c" 2 47 ""
v L "value" 2 47 "int8" `58 
f B "set_tris_c" 2 47 "void(int8 value)" `57 
f N "set_tris_e" 2 48 ""
v L "value" 2 48 "int8" `60 
f B "set_tris_e" 2 48 "void(int8 value)" `59 
f N "get_tris_a" 2 49 ""
f B "get_tris_a" 2 49 "int8()" `61 
f N "get_tris_b" 2 50 ""
f B "get_tris_b" 2 50 "int8()" `62 
f N "get_tris_c" 2 51 ""
f B "get_tris_c" 2 51 "int8()" `63 
f N "get_tris_e" 2 52 ""
f B "get_tris_e" 2 52 "int8()" `64 
f N "output_a" 2 53 ""
v L "value" 2 53 "int8" `66 
f B "output_a" 2 53 "void(int8 value)" `65 
f N "output_b" 2 54 ""
v L "value" 2 54 "int8" `68 
f B "output_b" 2 54 "void(int8 value)" `67 
f N "output_c" 2 55 ""
v L "value" 2 55 "int8" `70 
f B "output_c" 2 55 "void(int8 value)" `69 
f N "output_e" 2 56 ""
v L "value" 2 56 "int8" `72 
f B "output_e" 2 56 "void(int8 value)" `71 
f N "input_a" 2 57 ""
f B "input_a" 2 57 "int8()" `73 
f N "input_b" 2 58 ""
f B "input_b" 2 58 "int8()" `74 
f N "input_c" 2 59 ""
f B "input_c" 2 59 "int8()" `75 
f N "input_e" 2 60 ""
f B "input_e" 2 60 "int8()" `76 
f N "input_change_a" 2 61 ""
f B "input_change_a" 2 61 "int8()" `77 
f N "input_change_b" 2 62 ""
f B "input_change_b" 2 62 "int8()" `78 
f N "input_change_c" 2 63 ""
f B "input_change_c" 2 63 "int8()" `79 
f N "input_change_e" 2 64 ""
f B "input_change_e" 2 64 "int8()" `80 
f N "port_b_pullups" 2 65 ""
v L "value" 2 65 "int8" `82 
f B "port_b_pullups" 2 65 "void(int8 value)" `81 
f N "input" 2 66 ""
v L "pin" 2 66 "int16" `84 
f B "input" 2 66 "int8(int16 pin)" `83 
f N "input_state" 2 67 ""
v L "pin" 2 67 "int16" `86 
f B "input_state" 2 67 "int8(int16 pin)" `85 
f N "output_low" 2 68 ""
v L "pin" 2 68 "int16" `88 
f B "output_low" 2 68 "void(int16 pin)" `87 
f N "output_high" 2 69 ""
v L "pin" 2 69 "int16" `90 
f B "output_high" 2 69 "void(int16 pin)" `89 
f N "output_toggle" 2 70 ""
v L "pin" 2 70 "int16" `92 
f B "output_toggle" 2 70 "void(int16 pin)" `91 
f N "output_bit" 2 71 ""
v L "pin" 2 71 "int16" `94 
v L "level" 2 71 "int8" `95 
f B "output_bit" 2 71 "void(int16 pin,int8 level)" `93 
f N "output_float" 2 72 ""
v L "pin" 2 72 "int16" `97 
f B "output_float" 2 72 "void(int16 pin)" `96 
f N "output_drive" 2 73 ""
v L "pin" 2 73 "int16" `99 
f B "output_drive" 2 73 "void(int16 pin)" `98  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 77 "31744"
d G "PIN_A1" 2 78 "31745"
d G "PIN_A2" 2 79 "31746"
d G "PIN_A3" 2 80 "31747"
d G "PIN_A4" 2 81 "31748"
d G "PIN_A5" 2 82 "31749"
d G "PIN_A6" 2 83 "31750"
d G "PIN_B0" 2 85 "31752"
d G "PIN_B1" 2 86 "31753"
d G "PIN_B2" 2 87 "31754"
d G "PIN_B3" 2 88 "31755"
d G "PIN_B4" 2 89 "31756"
d G "PIN_B5" 2 90 "31757"
d G "PIN_B6" 2 91 "31758"
d G "PIN_B7" 2 92 "31759"
d G "PIN_C0" 2 94 "31760"
d G "PIN_C1" 2 95 "31761"
d G "PIN_C2" 2 96 "31762"
d G "PIN_C4" 2 97 "31764"
d G "PIN_C5" 2 98 "31765"
d G "PIN_C6" 2 99 "31766"
d G "PIN_C7" 2 100 "31767"
d G "PIN_E3" 2 102 "31779"
d G "FALSE" 2 105 "0"
d G "TRUE" 2 106 "1"
d G "BYTE" 2 108 "int8"
d G "BOOLEAN" 2 109 "int1"
d G "getc" 2 111 "getch"
d G "fgetc" 2 112 "getch"
d G "getchar" 2 113 "getch"
d G "putc" 2 114 "putchar"
d G "fputc" 2 115 "putchar"
d G "fgets" 2 116 "gets"
d G "fputs" 2 117 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 122 ""
f B "restart_cause" 2 122 "int8()" `100 
f N "reset_cpu" 2 123 ""
f B "reset_cpu" 2 123 "void()" `101 
f N "sleep" 2 124 ""
f B "sleep" 2 124 "void()" `102 
f N "sleep" 2 125 ""
v L "type" 2 125 "int8" `104 
f B "sleep" 2 125 "void(int8 type)" `103  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 127 "7"
d G "MCLR_FROM_SLEEP" 2 128 "11"
d G "MCLR_FROM_RUN" 2 129 "15"
d G "NORMAL_POWER_UP" 2 130 "12"
d G "BROWNOUT_RESTART" 2 131 "14"
d G "WDT_FROM_SLEEP" 2 132 "3"
d G "RESET_INSTRUCTION" 2 133 "0"
d G "SLEEP_FULL" 2 136 "0" "Default"
d G "SLEEP_IDLE" 2 137 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 144 ""
v L "mode" 2 144 "int8" `106 
f B "setup_timer_0" 2 144 "void(int8 mode)" `105 
f N "set_timer0" 2 145 ""
v L "value" 2 145 "int16" `108 
f B "set_timer0" 2 145 "void(int16 value)" `107 
f N "get_timer0" 2 146 ""
f B "get_timer0" 2 146 "int16()" `109 
f N "setup_counters" 2 147 ""
v L "mode" 2 147 "int8" `111 
v L "prescaler" 2 147 "int8" `112 
f B "setup_counters" 2 147 "void(int8 mode,int8 prescaler)" `110 
f N "set_rtcc" 2 148 ""
v L "value" 2 148 "int16" `114 
f B "set_rtcc" 2 148 "void(int16 value)" `113 
f N "get_rtcc" 2 149 ""
f B "get_rtcc" 2 149 "int16()" `115  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 151 "0"
d G "T0_EXT_L_TO_H" 2 152 "32"
d G "T0_EXT_H_TO_L" 2 153 "48"
d G "T0_DIV_1" 2 155 "8"
d G "T0_DIV_2" 2 156 "0"
d G "T0_DIV_4" 2 157 "1"
d G "T0_DIV_8" 2 158 "2"
d G "T0_DIV_16" 2 159 "3"
d G "T0_DIV_32" 2 160 "4"
d G "T0_DIV_64" 2 161 "5"
d G "T0_DIV_128" 2 162 "6"
d G "T0_DIV_256" 2 163 "7"
d G "T0_OFF" 2 165 "0x80"
d G "T0_8_BIT" 2 167 "0x40"
d G "RTCC_INTERNAL" 2 171 "0"
d G "RTCC_EXT_L_TO_H" 2 172 "32"
d G "RTCC_EXT_H_TO_L" 2 173 "48"
d G "RTCC_DIV_1" 2 174 "8"
d G "RTCC_DIV_2" 2 175 "0"
d G "RTCC_DIV_4" 2 176 "1"
d G "RTCC_DIV_8" 2 177 "2"
d G "RTCC_DIV_16" 2 178 "3"
d G "RTCC_DIV_32" 2 179 "4"
d G "RTCC_DIV_64" 2 180 "5"
d G "RTCC_DIV_128" 2 181 "6"
d G "RTCC_DIV_256" 2 182 "7"
d G "RTCC_OFF" 2 183 "0x80"
d G "RTCC_8_BIT" 2 184 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 195 ""
v L "mode" 2 195 "int16" `117 
f B "setup_wdt" 2 195 "void(int16 mode)" `116 
f N "restart_wdt" 2 196 ""
f B "restart_wdt" 2 196 "void()" `118  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 198 "0x100"
d G "WDT_OFF" 2 199 "0"
d G "WDT_4MS" 2 201 "0x300"
d G "WDT_8MS" 2 202 "0x500"
d G "WDT_16MS" 2 203 "0x700"
d G "WDT_32MS" 2 204 "0x900"
d G "WDT_64MS" 2 205 "0xB00"
d G "WDT_128MS" 2 206 "0xD00"
d G "WDT_256MS" 2 207 "0xF00"
d G "WDT_512MS" 2 208 "0x1100"
d G "WDT_1S" 2 209 "0x1300"
d G "WDT_2S" 2 210 "0x1500"
d G "WDT_4S" 2 211 "0x1700"
d G "WDT_8S" 2 212 "0x1900"
d G "WDT_16" 2 213 "0x1B00"
d G "WDT_32S" 2 214 "0x1D00"
d G "WDT_64S" 2 215 "0x1F00"
d G "WDT_128S" 2 216 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 221 ""
v L "mode" 2 221 "int16" `120 
f B "setup_timer_1" 2 221 "void(int16 mode)" `119 
f N "get_timer1" 2 222 ""
f B "get_timer1" 2 222 "int16()" `121 
f N "set_timer1" 2 223 ""
v L "value" 2 223 "int16" `123 
f B "set_timer1" 2 223 "void(int16 value)" `122  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 226 "0"
d G "T1_INTERNAL" 2 227 "0x85"
d G "T1_EXTERNAL" 2 228 "0x87"
d G "T1_EXTERNAL_SYNC" 2 229 "0x83"
d G "T1_CLK_OUT" 2 231 "8"
d G "T1_DIV_BY_1" 2 233 "0"
d G "T1_DIV_BY_2" 2 234 "0x10"
d G "T1_DIV_BY_4" 2 235 "0x20"
d G "T1_DIV_BY_8" 2 236 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 241 ""
v L "mode" 2 241 "int8" `125 
v L "period" 2 241 "int8" `126 
v L "postscale" 2 241 "int8" `127 
f B "setup_timer_2" 2 241 "void(int8 mode,int8 period,int8 postscale)" `124 
f N "get_timer2" 2 242 ""
f B "get_timer2" 2 242 "int8()" `128 
f N "set_timer2" 2 243 ""
v L "value" 2 243 "int8" `130 
f B "set_timer2" 2 243 "void(int8 value)" `129  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 245 "0"
d G "T2_DIV_BY_1" 2 246 "4"
d G "T2_DIV_BY_4" 2 247 "5"
d G "T2_DIV_BY_16" 2 248 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 253 ""
v L "mode" 2 253 "int16" `132 
f B "setup_timer_3" 2 253 "void(int16 mode)" `131 
f N "get_timer3" 2 254 ""
f B "get_timer3" 2 254 "int16()" `133 
f N "set_timer3" 2 255 ""
v L "value" 2 255 "int16" `135 
f B "set_timer3" 2 255 "void(int16 value)" `134  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 258 "0"
d G "T3_INTERNAL" 2 259 "0x85"
d G "T3_EXTERNAL" 2 260 "0x87"
d G "T3_EXTERNAL_SYNC" 2 261 "0x83"
d G "T3_DIV_BY_1" 2 263 "0"
d G "T3_DIV_BY_2" 2 264 "0x10"
d G "T3_DIV_BY_4" 2 265 "0x20"
d G "T3_DIV_BY_8" 2 266 "0x30"
d G "T3_CCP1_TO_2" 2 269 "0x48"
d G "T3_CCP2" 2 270 "0x8"
c L "set_timer3" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 276 ""
v L "mode" 2 276 "int32" `137 
f B "setup_ccp1" 2 276 "void(int32 mode)" `136 
f N "setup_ccp1" 2 277 ""
v L "mode" 2 277 "int32" `139 
v L "pwm" 2 277 "int8" `140 
f B "setup_ccp1" 2 277 "void(int32 mode,int8 pwm)" `138 
f N "set_pwm1_duty" 2 278 ""
v L "value" 2 278 "int16" `142 
f B "set_pwm1_duty" 2 278 "void(int16 value)" `141  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 280 "0"
d G "CCP_CAPTURE_FE" 2 281 "0x04"
d G "CCP_CAPTURE_RE" 2 282 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 283 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 284 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 285 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 286 "0x09"
d G "CCP_COMPARE_INT" 2 287 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 288 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 289 "0x0B"
d G "CCP_PWM" 2 290 "0x0C"
d G "CCP_PWM_PLUS_1" 2 291 "0x1c"
d G "CCP_PWM_PLUS_2" 2 292 "0x2c"
d G "CCP_PWM_PLUS_3" 2 293 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 301 ""
v L "mode" 2 301 "int32" `147 
f B "setup_ccp2" 2 301 "void(int32 mode)" `146 
f N "setup_ccp2" 2 302 ""
v L "mode" 2 302 "int32" `149 
v L "pwm" 2 302 "int8" `150 
f B "setup_ccp2" 2 302 "void(int32 mode,int8 pwm)" `148 
f N "set_pwm2_duty" 2 303 ""
v L "value" 2 303 "int16" `152 
f B "set_pwm2_duty" 2 303 "void(int16 value)" `151 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 310 ""
v L "mode" 2 310 "int32" `157 
f B "setup_spi" 2 310 "void(int32 mode)" `156 
f N "spi_write" 2 311 ""
v L "value" 2 311 "int8" `159 
f B "spi_write" 2 311 "void(int8 value)" `158 
f N "spi_read" 2 312 ""
f B "spi_read" 2 312 "int8()" `160 
f N "spi_read" 2 313 ""
v L "value" 2 313 "int8" `162 
f B "spi_read" 2 313 "int8(int8 value)" `161 
f N "spi_data_is_in" 2 314 ""
f B "spi_data_is_in" 2 314 "int8()" `163 
f N "setup_spi2" 2 315 ""
v L "mode" 2 315 "int32" `165 
f B "setup_spi2" 2 315 "void(int32 mode)" `164 
f N "spi_write2" 2 316 ""
v L "value" 2 316 "int8" `167 
f B "spi_write2" 2 316 "void(int8 value)" `166 
f N "spi_read2" 2 317 ""
f B "spi_read2" 2 317 "int8()" `168 
f N "spi_read2" 2 318 ""
v L "value" 2 318 "int8" `170 
f B "spi_read2" 2 318 "int8(int8 value)" `169 
f N "spi_data_is_in2" 2 319 ""
f B "spi_data_is_in2" 2 319 "int8()" `171  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 321 "0x00"
d G "SPI_MASTER" 2 322 "0x20"
d G "SPI_SLAVE" 2 323 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 324 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 325 "0x00"
d G "SPI_CLK_DIV_4" 2 326 "0x00"
d G "SPI_CLK_DIV_16" 2 327 "0x01"
d G "SPI_CLK_DIV_64" 2 328 "0x02"
d G "SPI_CLK_T2" 2 329 "0x03"
d G "SPI_SS_DISABLED" 2 330 "0x01"
d G "SPI_XMIT_L_TO_H" 2 332 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 333 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 335 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 336 "0x8000"
d G "SPI_L_TO_H" 2 339 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 340 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 344 ""
v L "baud" 2 344 "int32" `173 
f B "setup_uart" 2 344 "void(int32 baud)" `172 
f N "setup_uart" 2 345 ""
v L "baud" 2 345 "int32" `175 
v L "stream" 2 345 "int8" `176 
f B "setup_uart" 2 345 "void(int32 baud,int8 stream)" `174 
f N "setup_uart" 2 346 ""
v L "baud" 2 346 "int32" `178 
v L "stream" 2 346 "int8" `179 
v L "clock" 2 346 "int32" `180 
f B "setup_uart" 2 346 "void(int32 baud,int8 stream,int32 clock)" `177 
f N "set_uart_speed" 2 347 ""
v L "baud" 2 347 "int32" `182 
f B "set_uart_speed" 2 347 "void(int32 baud)" `181 
f N "set_uart_speed" 2 348 ""
v L "baud" 2 348 "int32" `184 
v L "stream" 2 348 "int8" `185 
f B "set_uart_speed" 2 348 "void(int32 baud,int8 stream)" `183 
f N "set_uart_speed" 2 349 ""
v L "baud" 2 349 "int32" `187 
v L "stream" 2 349 "int8" `188 
v L "clock" 2 349 "int32" `189 
f B "set_uart_speed" 2 349 "void(int32 baud,int8 stream,int32 clock)" `186  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 353 "2"
d G "UART_DATA" 2 354 "4"
d G "UART_AUTODETECT" 2 355 "8"
d G "UART_AUTODETECT_NOWAIT" 2 356 "9"
d G "UART_WAKEUP_ON_RDA" 2 357 "10"
d G "UART_SEND_BREAK" 2 358 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 362 ""
v L "mode" 2 362 "int32" `191 
f B "setup_comparator" 2 362 "void(int32 mode)" `190  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 364 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 365 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 366 "0xbcf05"
d G "NC_NC_NC_NC" 2 367 "0x0ff07"
d G "A0_A3_A1_A2" 2 368 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 369 "0x9ef01"
d G "A0_VR_A1_VR" 2 370 "0x3ff06"
d G "A3_VR_A2_VR" 2 371 "0xcff0e"
d G "CP1_INVERT" 2 372 "0x0000010"
d G "CP2_INVERT" 2 373 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 380 ""
v L "mode" 2 380 "int8" `195 
f B "setup_vref" 2 380 "void(int8 mode)" `194  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 382 "0xa0"
d G "VREF_HIGH" 2 383 "0x80"
d G "VREF_F5" 2 385 "0x40"
d G "VREF_COMP" 2 386 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 390 ""
v L "mode" 2 390 "int8" `197 
f B "setup_low_volt_detect" 2 390 "void(int8 mode)" `196  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 392 "0x1F"
d G "LVD_45" 2 393 "0x1E"
d G "LVD_42" 2 394 "0x1D"
d G "LVD_40" 2 395 "0x1C"
d G "LVD_38" 2 396 "0x1B"
d G "LVD_36" 2 397 "0x1A"
d G "LVD_35" 2 398 "0x19"
d G "LVD_33" 2 399 "0x18"
d G "LVD_30" 2 400 "0x17"
d G "LVD_28" 2 401 "0x16"
d G "LVD_27" 2 402 "0x15"
d G "LVD_25" 2 403 "0x14"
d G "LVD_24" 2 404 "0x13"
d G "LVD_23" 2 405 "0x12"
d G "LVD_22" 2 406 "0x11"
d G "LVD_21" 2 407 "0x10"
d G "LVD_TRIGGER_BELOW" 2 409 "0"
d G "LVD_TRIGGER_ABOVE" 2 410 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 415 ""
v L "mode" 2 415 "int16" `199 
f B "setup_oscillator" 2 415 "int8(int16 mode)" `198 
f N "setup_oscillator" 2 416 ""
v L "mode" 2 416 "int16" `201 
v L "tune" 2 416 "sint8" `202 
f B "setup_oscillator" 2 416 "int8(int16 mode,sint8 tune)" `200  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 419 "0"
d G "OSC_125KHZ" 2 420 "0x10"
d G "OSC_250KHZ" 2 421 "0x20"
d G "OSC_500KHZ" 2 422 "0x30"
d G "OSC_1MHZ" 2 423 "0x40"
d G "OSC_2MHZ" 2 424 "0x50"
d G "OSC_4MHZ" 2 425 "0x60"
d G "OSC_8MHZ" 2 426 "0x70"
d G "OSC_TIMER1" 2 428 "1"
d G "OSC_INTRC" 2 429 "2"
d G "OSC_NORMAL" 2 430 "0"
d G "OSC_IDLE_MODE" 2 432 "0x80"
d G "OSC_31250" 2 433 "0x8000"
d G "OSC_STATE_STABLE" 2 437 "4"
d G "OSC_STATE_EXT_RUNNING" 2 438 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 445 ""
v L "mode" 2 445 "int16" `204 
f B "setup_adc" 2 445 "void(int16 mode)" `203 
f N "read_adc" 2 446 ""
f B "read_adc" 2 446 "int8()" `205 
f N "read_adc" 2 447 ""
v L "mode" 2 447 "int8" `207 
f B "read_adc" 2 447 "int8(int8 mode)" `206 
f N "read_adc" 2 448 ""
f G "read_adc" 2 448 "int16()" `208 
f N "read_adc" 2 449 ""
v L "mode" 2 449 "int8" `209 
f G "read_adc" 2 449 "int16(int8 mode,int8 pins)" `208 
f N "adc_done" 2 450 ""
f B "adc_done" 2 450 "int8(int8 mode,int8 pins)" `208  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 452 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 453 "0x100"
d G "ADC_CLOCK_DIV_4" 2 454 "0x04"
d G "ADC_CLOCK_DIV_8" 2 455 "0x01"
d G "ADC_CLOCK_DIV_16" 2 456 "0x05"
d G "ADC_CLOCK_DIV_32" 2 457 "0x02"
d G "ADC_CLOCK_DIV_64" 2 458 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 459 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 461 "0x00"
d G "ADC_TAD_MUL_2" 2 462 "0x08"
d G "ADC_TAD_MUL_4" 2 463 "0x10"
d G "ADC_TAD_MUL_6" 2 464 "0x18"
d G "ADC_TAD_MUL_8" 2 465 "0x20"
d G "ADC_TAD_MUL_12" 2 466 "0x28"
d G "ADC_TAD_MUL_16" 2 467 "0x30"
d G "ADC_TAD_MUL_20" 2 468 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 471 ""
v L "pins" 2 471 "int8" `210 
f B "setup_adc_ports" 2 471 "void(int8 pins)" `209 
f N "setup_adc_ports" 2 472 ""
v L "pins" 2 472 "int8" `212 
v L "reference" 2 472 "int8" `213 
f B "setup_adc_ports" 2 472 "void(int8 pins,int8 reference)" `211 
f N "set_analog_pins" 2 473 ""
v L "pins" 2 473 "int8" `215 
f B "set_analog_pins" 2 473 "void(int8 pins)" `214 
f N "set_analog_pins" 2 474 ""
v L "pins" 2 474 "int8" `217 
v L "reference" 2 474 "int8" `218 
f B "set_analog_pins" 2 474 "void(int8 pins,int8 reference)" `216 
f N "set_adc_channel" 2 475 ""
v L "channel" 2 475 "int8" `220 
f B "set_adc_channel" 2 475 "void(int8 channel)" `219  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 2 478 "0x0F" "None"
d G "ALL_ANALOG" 2 479 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 480 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 481 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 482 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 483 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 484 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 485 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 486 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 487 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 488 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 489 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 490 "0x0D" "A0 A1"
d G "AN0" 2 491 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 492 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 493 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 494 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 495 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 496 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 497 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 498 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 499 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 500 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 501 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 502 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 503 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 506 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 507 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 508 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 509 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 512 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 513 "1"
d G "ADC_READ_ONLY" 2 514 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 520 ""
v L "x" 2 520 "sint8" `222 
f B "abs" 2 520 "sint8(sint8 x)" `221 
f N "abs" 2 521 ""
v L "x" 2 521 "sint16" `224 
f B "abs" 2 521 "sint16(sint16 x)" `223 
f N "abs" 2 522 ""
v L "x" 2 522 "sint32" `226 
f B "abs" 2 522 "sint32(sint32 x)" `225 
f N "abs" 2 523 ""
v L "x" 2 523 "float" `228 
f B "abs" 2 523 "float(float x)" `227 
f N "_mul" 2 524 ""
v L "??65535" 2 524 "int8" `230 
v L "??65535" 2 524 "int8" `231 
f B "_mul" 2 524 "int16(int8 ,int8 )" `229 
f N "_mul" 2 525 ""
v L "??65535" 2 525 "sint8" `233 
v L "??65535" 2 525 "sint8" `234 
f B "_mul" 2 525 "sint16(sint8 ,sint8 )" `232 
f N "_mul" 2 526 ""
v L "??65535" 2 526 "int16" `236 
v L "??65535" 2 526 "int16" `237 
f B "_mul" 2 526 "int32(int16 ,int16 )" `235 
f N "_mul" 2 527 ""
v L "??65535" 2 527 "sint16" `239 
v L "??65535" 2 527 "sint16" `240 
f B "_mul" 2 527 "sint32(sint16 ,sint16 )" `238  "Memory Manipulation Prototypes:"
f N "read_bank" 2 530 ""
v L "bank" 2 530 "int8" `242 
v L "offset" 2 530 "int8" `243 
f B "read_bank" 2 530 "int8(int8 bank,int8 offset)" `241 
f N "write_bank" 2 531 ""
v L "bank" 2 531 "int8" `245 
v L "offset" 2 531 "int8" `246 
v L "value" 2 531 "int8" `247 
f B "write_bank" 2 531 "void(int8 bank,int8 offset,int8 value)" `244 
f N "strcpy" 2 532 ""
v L "dest" 2 532 "*int8" `249 
v L "src" 2 532 "*int8" `250 
f B "strcpy" 2 532 "void(*int8 dest,*int8 src)" `248 
f N "memset" 2 533 ""
v L "destination" 2 533 "*int8" `252 
v L "value" 2 533 "int8" `253 
v L "num" 2 533 "int16" `254 
f B "memset" 2 533 "void(*int8 destination,int8 value,int16 num)" `251 
f N "memcpy" 2 534 ""
v L "destination" 2 534 "*int8" `256 
v L "source" 2 534 "*int8" `257 
v L "num" 2 534 "int16" `258 
f B "memcpy" 2 534 "void(*int8 destination,*int8 source,int16 num)" `255  "String Prototypes:"
f N "toupper" 2 537 ""
v L "cvalue" 2 537 "int8" `260 
f B "toupper" 2 537 "int8(int8 cvalue)" `259 
f N "tolower" 2 538 ""
v L "cvalue" 2 538 "int8" `262 
f B "tolower" 2 538 "int8(int8 cvalue)" `261 
f N "sprintf" 2 539 ""
v L "string" 2 539 "*int8" `264 
v L "cstring" 2 539 "*int8" `265 
f B "sprintf" 2 539 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `263  "Data Manipulators Prototypes:"
f N "shift_left" 2 542 ""
v L "address" 2 542 "*int8" `268 
v L "bytes" 2 542 "int8" `269 
v L "value" 2 542 "int8" `270 
f B "shift_left" 2 542 "int8(*int8 address,int8 bytes,int8 value)" `267 
f N "shift_right" 2 543 ""
v L "address" 2 543 "*int8" `272 
v L "bytes" 2 543 "int8" `273 
v L "value" 2 543 "int8" `274 
f B "shift_right" 2 543 "int8(*int8 address,int8 bytes,int8 value)" `271 
f N "rotate_left" 2 544 ""
v L "address" 2 544 "*int8" `276 
v L "bytes" 2 544 "int8" `277 
f B "rotate_left" 2 544 "void(*int8 address,int8 bytes)" `275 
f N "rotate_right" 2 545 ""
v L "address" 2 545 "*int8" `279 
v L "bytes" 2 545 "int8" `280 
f B "rotate_right" 2 545 "void(*int8 address,int8 bytes)" `278 
f N "swap" 2 546 ""
v L "value" 2 546 "int8" `282 
f B "swap" 2 546 "void(int8 value)" `281 
f N "make8" 2 547 ""
v L "var" 2 547 "int16" `284 
v L "offset" 2 547 "int8" `285 
f B "make8" 2 547 "int8(int16 var,int8 offset)" `283 
f N "make8" 2 548 ""
v L "var" 2 548 "int32" `287 
v L "offset" 2 548 "int8" `288 
f B "make8" 2 548 "int8(int32 var,int8 offset)" `286 
f N "make16" 2 549 ""
v L "varhigh" 2 549 "int8" `290 
v L "varlow" 2 549 "int8" `291 
f B "make16" 2 549 "int16(int8 varhigh,int8 varlow)" `289 
f N "make32" 2 550 ""
v L "var1" 2 550 "int16" `293 
f B "make32" 2 550 "int32(int16 var1)" `292 
f N "make32" 2 551 ""
v L "var1" 2 551 "int16" `295 
v L "var2" 2 551 "int16" `296 
f B "make32" 2 551 "int32(int16 var1,int16 var2)" `294 
f N "make32" 2 552 ""
v L "var1" 2 552 "int16" `298 
v L "var2" 2 552 "int8" `299 
f B "make32" 2 552 "int32(int16 var1,int8 var2)" `297 
f N "make32" 2 553 ""
v L "var1" 2 553 "int16" `301 
v L "var2" 2 553 "int8" `302 
v L "var3" 2 553 "int8" `303 
f B "make32" 2 553 "int32(int16 var1,int8 var2,int8 var3)" `300 
f N "make32" 2 554 ""
v L "var1" 2 554 "int8" `305 
f B "make32" 2 554 "int32(int8 var1)" `304 
f N "make32" 2 555 ""
v L "var1" 2 555 "int8" `307 
v L "var2" 2 555 "int8" `308 
f B "make32" 2 555 "int32(int8 var1,int8 var2)" `306 
f N "make32" 2 556 ""
v L "var1" 2 556 "int8" `310 
v L "var2" 2 556 "int8" `311 
v L "var3" 2 556 "int8" `312 
f B "make32" 2 556 "int32(int8 var1,int8 var2,int8 var3)" `309 
f N "make32" 2 557 ""
v L "var1" 2 557 "int8" `314 
v L "var2" 2 557 "int8" `315 
v L "var3" 2 557 "int8" `316 
v L "var4" 2 557 "int8" `317 
f B "make32" 2 557 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `313 
f N "make32" 2 558 ""
v L "var1" 2 558 "int8" `319 
v L "var2" 2 558 "int16" `320 
f B "make32" 2 558 "int32(int8 var1,int16 var2)" `318 
f N "make32" 2 559 ""
v L "var1" 2 559 "int8" `322 
v L "var2" 2 559 "int16" `323 
v L "var3" 2 559 "int8" `324 
f B "make32" 2 559 "int32(int8 var1,int16 var2,int8 var3)" `321 
f N "make32" 2 560 ""
v L "var1" 2 560 "int8" `326 
v L "var2" 2 560 "int8" `327 
v L "var3" 2 560 "int16" `328 
f B "make32" 2 560 "int32(int8 var1,int8 var2,int16 var3)" `325 
f N "bit_set" 2 561 ""
v L "var" 2 561 "int8" `330 
v L "bit" 2 561 "int8" `331 
f B "bit_set" 2 561 "void(int8 var,int8 bit)" `329 
f N "bit_set" 2 562 ""
v L "var" 2 562 "int16" `333 
v L "bit" 2 562 "int8" `334 
f B "bit_set" 2 562 "void(int16 var,int8 bit)" `332 
f N "bit_set" 2 563 ""
v L "var" 2 563 "int32" `336 
v L "bit" 2 563 "int8" `337 
f B "bit_set" 2 563 "void(int32 var,int8 bit)" `335 
f N "bit_clear" 2 564 ""
v L "var" 2 564 "int8" `339 
v L "bit" 2 564 "int8" `340 
f B "bit_clear" 2 564 "void(int8 var,int8 bit)" `338 
f N "bit_clear" 2 565 ""
v L "var" 2 565 "int16" `342 
v L "bit" 2 565 "int8" `343 
f B "bit_clear" 2 565 "void(int16 var,int8 bit)" `341 
f N "bit_clear" 2 566 ""
v L "var" 2 566 "int32" `345 
v L "bit" 2 566 "int8" `346 
f B "bit_clear" 2 566 "void(int32 var,int8 bit)" `344 
f N "bit_test" 2 567 ""
v L "var" 2 567 "int8" `348 
v L "bit" 2 567 "int8" `349 
f B "bit_test" 2 567 "int8(int8 var,int8 bit)" `347 
f N "bit_test" 2 568 ""
v L "var" 2 568 "int16" `351 
v L "bit" 2 568 "int8" `352 
f B "bit_test" 2 568 "int8(int16 var,int8 bit)" `350 
f N "bit_test" 2 569 ""
v L "var" 2 569 "int32" `354 
v L "bit" 2 569 "int8" `355 
f B "bit_test" 2 569 "int8(int32 var,int8 bit)" `353  "#use delay() Prototypes:"
f N "delay_cycles" 2 572 ""
v L "count" 2 572 "int8" `357 
f B "delay_cycles" 2 572 "void(int8 count)" `356 
f N "delay_ms" 2 573 ""
v L "time" 2 573 "int16" `359 
f B "delay_ms" 2 573 "void(int16 time)" `358 
f N "delay_us" 2 574 ""
v L "time" 2 574 "int16" `361 
f B "delay_us" 2 574 "void(int16 time)" `360  "#use rs232() Prototypes:"
f N "putchar" 2 577 ""
v L "cdata" 2 577 "int8" `363 
f B "putchar" 2 577 "void(int8 cdata)" `362 
f N "putchar" 2 578 ""
v L "cdata" 2 578 "int8" `365 
v L "stream" 2 578 "int8" `366 
f B "putchar" 2 578 "void(int8 cdata,int8 stream)" `364 
f N "puts" 2 579 ""
v L "string" 2 579 "*int8" `368 
f B "puts" 2 579 "void(*int8 string)" `367 
f N "puts" 2 580 ""
v L "string" 2 580 "*int8" `370 
v L "stream" 2 580 "int8" `371 
f B "puts" 2 580 "void(*int8 string,int8 stream)" `369 
f N "getch" 2 581 ""
f B "getch" 2 581 "int8()" `372 
f N "getch" 2 582 ""
v L "stream" 2 582 "int8" `374 
f B "getch" 2 582 "int8(int8 stream)" `373 
f N "gets" 2 583 ""
v L "string" 2 583 "*int8" `376 
f B "gets" 2 583 "void(*int8 string)" `375 
f N "gets" 2 584 ""
v L "string" 2 584 "*int8" `378 
v L "stream" 2 584 "int8" `379 
f B "gets" 2 584 "void(*int8 string,int8 stream)" `377 
f N "kbhit" 2 585 ""
f B "kbhit" 2 585 "int8()" `380 
f N "kbhit" 2 586 ""
v L "stream" 2 586 "int8" `382 
f B "kbhit" 2 586 "int8(int8 stream)" `381 
f N "printf" 2 587 ""
v L "string" 2 587 "*int8" `384 
f B "printf" 2 587 "void(*int8 string,*int8 _VA_LIST)" `383 
f N "fprintf" 2 588 ""
v L "stream" 2 588 "int8" `387 
v L "string" 2 588 "*int8" `388 
f B "fprintf" 2 588 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `386 
f N "putc_send" 2 589 ""
f B "putc_send" 2 589 "void()" `390 
f N "fputc_send" 2 590 ""
v L "stream" 2 590 "int8" `392 
f B "fputc_send" 2 590 "void(int8 stream)" `391 
f N "rcv_buffer_full" 2 591 ""
f B "rcv_buffer_full" 2 591 "int8()" `393 
f N "rcv_buffer_full" 2 592 ""
v L "stream" 2 592 "int8" `395 
f B "rcv_buffer_full" 2 592 "int8(int8 stream)" `394 
f N "rcv_buffer_bytes" 2 593 ""
f B "rcv_buffer_bytes" 2 593 "int16()" `396 
f N "rcv_buffer_bytes" 2 594 ""
v L "stream" 2 594 "int8" `398 
f B "rcv_buffer_bytes" 2 594 "int16(int8 stream)" `397 
f N "tx_buffer_full" 2 595 ""
f B "tx_buffer_full" 2 595 "int8()" `399 
f N "tx_buffer_full" 2 596 ""
v L "stream" 2 596 "int8" `401 
f B "tx_buffer_full" 2 596 "int8(int8 stream)" `400 
f N "tx_buffer_bytes" 2 597 ""
f B "tx_buffer_bytes" 2 597 "int16()" `402 
f N "tx_buffer_bytes" 2 598 ""
v L "stream" 2 598 "int8" `404 
f B "tx_buffer_bytes" 2 598 "int16(int8 stream)" `403  "#use i2c() Prototypes:"
f N "i2c_read" 2 601 ""
f B "i2c_read" 2 601 "int8()" `405 
f N "i2c_read" 2 602 ""
v L "ack" 2 602 "int8" `407 
f B "i2c_read" 2 602 "int8(int8 ack)" `406 
f N "i2c_read" 2 603 ""
v L "stream" 2 603 "int8" `409 
v L "ack" 2 603 "int8" `410 
f B "i2c_read" 2 603 "int8(int8 stream,int8 ack)" `408 
f N "i2c_write" 2 604 ""
v L "data" 2 604 "int8" `412 
f B "i2c_write" 2 604 "int8(int8 data)" `411 
f N "i2c_write" 2 605 ""
v L "stream" 2 605 "int8" `414 
v L "data" 2 605 "int8" `415 
f B "i2c_write" 2 605 "int8(int8 stream,int8 data)" `413 
f N "i2c_start" 2 606 ""
f B "i2c_start" 2 606 "void()" `416 
f N "i2c_start" 2 607 ""
v L "stream" 2 607 "int8" `418 
f B "i2c_start" 2 607 "void(int8 stream)" `417 
f N "i2c_start" 2 608 ""
v L "stream" 2 608 "int8" `420 
v L "restart" 2 608 "int8" `421 
f B "i2c_start" 2 608 "void(int8 stream,int8 restart)" `419 
f N "i2c_stop" 2 609 ""
f B "i2c_stop" 2 609 "void()" `422 
f N "i2c_stop" 2 610 ""
v L "stream" 2 610 "int8" `424 
f B "i2c_stop" 2 610 "void(int8 stream)" `423 
f N "i2c_isr_state" 2 611 ""
f B "i2c_isr_state" 2 611 "int8()" `425 
f N "i2c_slaveaddr" 2 612 ""
v L "addr" 2 612 "int8" `427 
f B "i2c_slaveaddr" 2 612 "void(int8 addr)" `426 
f N "i2c_slaveaddr" 2 613 ""
v L "stream" 2 613 "int8" `429 
v L "addr" 2 613 "int8" `430 
f B "i2c_slaveaddr" 2 613 "void(int8 stream,int8 addr)" `428 
f N "i2c_poll" 2 614 ""
f B "i2c_poll" 2 614 "int8()" `431 
f N "i2c_poll" 2 615 ""
v L "stream" 2 615 "int8" `433 
f B "i2c_poll" 2 615 "int8(int8 stream)" `432 
f N "i2c_init" 2 616 ""
v L "baud" 2 616 "int32" `435 
f B "i2c_init" 2 616 "void(int32 baud)" `434 
f N "i2c_init" 2 617 ""
v L "stream" 2 617 "int8" `437 
v L "baud" 2 617 "int32" `438 
f B "i2c_init" 2 617 "void(int8 stream,int32 baud)" `436  "#use spi() Prototypes:"
f N "spi_xfer" 2 620 ""
f B "spi_xfer" 2 620 "int8()" `439 
f N "spi_xfer" 2 621 ""
f G "spi_xfer" 2 621 "int16(int8 data)" `440 
f N "spi_xfer" 2 622 ""
f G "spi_xfer" 2 622 "int32(int8 data)" `440 
f N "spi_xfer" 2 623 ""
v L "data" 2 623 "int8" `441 
f B "spi_xfer" 2 623 "int8(int8 data)" `440 
f N "spi_xfer" 2 624 ""
v L "data" 2 624 "int16" `443 
f B "spi_xfer" 2 624 "int16(int16 data)" `442 
f N "spi_xfer" 2 625 ""
v L "data" 2 625 "int32" `445 
f B "spi_xfer" 2 625 "int32(int32 data)" `444 
f N "spi_xfer" 2 626 ""
v L "stream" 2 626 "int8" `447 
v L "data" 2 626 "int8" `448 
f B "spi_xfer" 2 626 "int8(int8 stream,int8 data)" `446 
f N "spi_xfer" 2 627 ""
v L "stream" 2 627 "int8" `450 
v L "data" 2 627 "int16" `451 
f B "spi_xfer" 2 627 "int16(int8 stream,int16 data)" `449 
f N "spi_xfer" 2 628 ""
v L "stream" 2 628 "int8" `453 
v L "data" 2 628 "int32" `454 
f B "spi_xfer" 2 628 "int32(int8 stream,int32 data)" `452 
f N "spi_xfer" 2 629 ""
v L "stream" 2 629 "int8" `456 
v L "data" 2 629 "int8" `457 
v L "bits" 2 629 "int8" `458 
f B "spi_xfer" 2 629 "int8(int8 stream,int8 data,int8 bits)" `455 
f N "spi_xfer" 2 630 ""
v L "stream" 2 630 "int8" `460 
v L "data" 2 630 "int16" `461 
v L "bits" 2 630 "int8" `462 
f B "spi_xfer" 2 630 "int16(int8 stream,int16 data,int8 bits)" `459 
f N "spi_xfer" 2 631 ""
v L "stream" 2 631 "int8" `464 
v L "data" 2 631 "int32" `465 
v L "bits" 2 631 "int8" `466 
f B "spi_xfer" 2 631 "int32(int8 stream,int32 data,int8 bits)" `463 
f N "spi_init" 2 632 ""
v L "baud" 2 632 "int32" `468 
f B "spi_init" 2 632 "void(int32 baud)" `467 
f N "spi_init" 2 633 ""
v L "stream" 2 633 "int8" `470 
v L "baud" 2 633 "int32" `471 
f B "spi_init" 2 633 "void(int8 stream,int32 baud)" `469 
f N "spi_speed" 2 634 ""
v L "baud" 2 634 "int32" `473 
f B "spi_speed" 2 634 "void(int32 baud)" `472 
f N "spi_speed" 2 635 ""
v L "stream" 2 635 "int8" `475 
v L "baud" 2 635 "int32" `476 
f B "spi_speed" 2 635 "void(int8 stream,int32 baud)" `474 
f N "spi_speed" 2 636 ""
v L "stream" 2 636 "int8" `478 
v L "baud" 2 636 "int32" `479 
v L "clock" 2 636 "int32" `480 
f B "spi_speed" 2 636 "void(int8 stream,int32 baud,int32 clock)" `477 
f N "spi_prewrite" 2 637 ""
v L "data" 2 637 "int8" `482 
f B "spi_prewrite" 2 637 "void(int8 data)" `481 
f N "spi_prewrite" 2 638 ""
v L "data" 2 638 "int16" `484 
f B "spi_prewrite" 2 638 "void(int16 data)" `483 
f N "spi_prewrite" 2 639 ""
v L "data" 2 639 "int32" `486 
f B "spi_prewrite" 2 639 "void(int32 data)" `485 
f N "spi_prewrite" 2 640 ""
v L "??65535" 2 640 "int8" `488 
v L "data" 2 640 "int8" `489 
f B "spi_prewrite" 2 640 "void(int8 ,int8 data)" `487 
f N "spi_prewrite" 2 641 ""
v L "??65535" 2 641 "int8" `491 
v L "data" 2 641 "int16" `492 
f B "spi_prewrite" 2 641 "void(int8 ,int16 data)" `490 
f N "spi_prewrite" 2 642 ""
v L "??65535" 2 642 "int8" `494 
v L "data" 2 642 "int32" `495 
f B "spi_prewrite" 2 642 "void(int8 ,int32 data)" `493 
f N "spi_xfer_in" 2 643 ""
f B "spi_xfer_in" 2 643 "int8()" `496 
f N "spi_xfer_in" 2 644 ""
f G "spi_xfer_in" 2 644 "int16(int8 bits)" `497 
f N "spi_xfer_in" 2 645 ""
f G "spi_xfer_in" 2 645 "int32(int8 bits)" `497 
f N "spi_xfer_in" 2 646 ""
v L "bits" 2 646 "int8" `498 
f B "spi_xfer_in" 2 646 "int8(int8 bits)" `497 
f N "spi_xfer_in" 2 647 ""
v L "bits" 2 647 "int8" `500 
f G "spi_xfer_in" 2 647 "int16(int8 bits,int8 bits)" `499 
f N "spi_xfer_in" 2 648 ""
v L "bits" 2 648 "int8" `500 
f G "spi_xfer_in" 2 648 "int32(int8 bits,int8 bits)" `499 
f N "spi_xfer_in" 2 649 ""
v L "stream" 2 649 "int8" `500 
v L "bits" 2 649 "int8" `501 
f B "spi_xfer_in" 2 649 "int8(int8 stream,int8 bits)" `499 
f N "spi_xfer_in" 2 650 ""
v L "stream" 2 650 "int8" `500 
v L "bits" 2 650 "int8" `504 
f G "spi_xfer_in" 2 650 "int16(int8 stream,int8 bits,int8 task)" `502 
f N "spi_xfer_in" 2 651 ""
v L "stream" 2 651 "int8" `500 
v L "bits" 2 651 "int8" `504 
f G "spi_xfer_in" 2 651 "int32(int8 stream,int8 bits,int8 task)" `502  "#use rtos() Prototypes:"
f N "rtos_run" 2 654 ""
f B "rtos_run" 2 654 "void(int8 stream,int8 bits,int8 task)" `502 
f N "rtos_yield" 2 655 ""
f B "rtos_yield" 2 655 "void(int8 bits,int8 task)" `503 
f N "rtos_enable" 2 656 ""
v L "task" 2 656 "int8" `505 
f B "rtos_enable" 2 656 "void(int8 task)" `504 
f N "rtos_disable" 2 657 ""
v L "task" 2 657 "int8" `507 
f B "rtos_disable" 2 657 "void(int8 task)" `506 
f N "rtos_terminate" 2 658 ""
f B "rtos_terminate" 2 658 "void()" `508 
f N "rtos_await" 2 659 ""
v L "flag" 2 659 "int8" `510 
f B "rtos_await" 2 659 "void(int8 flag)" `509 
f N "rtos_wait" 2 660 ""
v L "sem" 2 660 "int8" `512 
f B "rtos_wait" 2 660 "void(int8 sem)" `511 
f N "rtos_signal" 2 661 ""
v L "sem" 2 661 "int8" `514 
f B "rtos_signal" 2 661 "void(int8 sem)" `513 
f N "rtos_msg_send" 2 662 ""
v L "task" 2 662 "int8" `516 
v L "msg" 2 662 "int8" `517 
f B "rtos_msg_send" 2 662 "void(int8 task,int8 msg)" `515 
f N "rtos_msg_read" 2 663 ""
f B "rtos_msg_read" 2 663 "int8()" `518 
f N "rtos_msg_poll" 2 664 ""
f B "rtos_msg_poll" 2 664 "int8()" `519 
f N "rtos_overrun" 2 665 ""
v L "task" 2 665 "int8" `521 
f B "rtos_overrun" 2 665 "int8(int8 task)" `520 
f N "rtos_stats" 2 666 ""
v L "task" 2 666 "int8" `523 
v L "stat" 2 666 "*int8" `524 
f B "rtos_stats" 2 666 "void(int8 task,*int8 stat)" `522  "#use timer() Prototypes:"
f N "get_ticks" 2 669 ""
f B "get_ticks" 2 669 "int8()" `525 
f N "get_ticks" 2 670 ""
f G "get_ticks" 2 670 "int16(int8 stream)" `526 
f N "get_ticks" 2 671 ""
f G "get_ticks" 2 671 "int32(int8 stream)" `526 
f N "get_ticks" 2 672 ""
v L "stream" 2 672 "int8" `527 
f B "get_ticks" 2 672 "int8(int8 stream)" `526 
f N "get_ticks" 2 673 ""
v L "stream" 2 673 "int8" `529 
f G "get_ticks" 2 673 "int16(int8 stream)" `528 
f N "get_ticks" 2 674 ""
v L "stream" 2 674 "int8" `529 
f G "get_ticks" 2 674 "int32(int8 stream)" `528 
f N "set_ticks" 2 675 ""
v L "value" 2 675 "int8" `529 
f B "set_ticks" 2 675 "void(int8 value)" `528 
f N "set_ticks" 2 676 ""
v L "value" 2 676 "int16" `531 
f B "set_ticks" 2 676 "void(int16 value)" `530 
f N "set_ticks" 2 677 ""
v L "value" 2 677 "int32" `533 
f B "set_ticks" 2 677 "void(int32 value)" `532 
f N "set_ticks" 2 678 ""
v L "stream" 2 678 "int8" `535 
v L "value" 2 678 "int8" `536 
f B "set_ticks" 2 678 "void(int8 stream,int8 value)" `534 
f N "set_ticks" 2 679 ""
v L "stream" 2 679 "int8" `538 
v L "value" 2 679 "int16" `539 
f B "set_ticks" 2 679 "void(int8 stream,int16 value)" `537 
f N "set_ticks" 2 680 ""
v L "stream" 2 680 "int8" `541 
v L "value" 2 680 "int32" `542 
f B "set_ticks" 2 680 "void(int8 stream,int32 value)" `540  "#use pwm() Prototypes:"
f N "pwm_on" 2 683 ""
f B "pwm_on" 2 683 "void()" `543 
f N "pwm_on" 2 684 ""
v L "stream" 2 684 "int8" `545 
f B "pwm_on" 2 684 "void(int8 stream)" `544 
f N "pwm_off" 2 685 ""
f B "pwm_off" 2 685 "void()" `546 
f N "pwm_off" 2 686 ""
v L "stream" 2 686 "int8" `548 
f B "pwm_off" 2 686 "void(int8 stream)" `547 
f N "pwm_set_duty" 2 687 ""
v L "duty" 2 687 "int16" `550 
f B "pwm_set_duty" 2 687 "void(int16 duty)" `549 
f N "pwm_set_duty" 2 688 ""
v L "stream" 2 688 "int8" `552 
v L "duty" 2 688 "int16" `553 
f B "pwm_set_duty" 2 688 "void(int8 stream,int16 duty)" `551 
f N "pwm_set_duty_percent" 2 689 ""
v L "percent" 2 689 "int16" `555 
f B "pwm_set_duty_percent" 2 689 "void(int16 percent)" `554 
f N "pwm_set_duty_percent" 2 690 ""
v L "stream" 2 690 "int8" `557 
v L "percent" 2 690 "int16" `558 
f B "pwm_set_duty_percent" 2 690 "void(int8 stream,int16 percent)" `556 
f N "pwm_set_frequency" 2 691 ""
v L "frequency" 2 691 "int32" `560 
f B "pwm_set_frequency" 2 691 "void(int32 frequency)" `559 
f N "pwm_set_frequency" 2 692 ""
v L "stream" 2 692 "int8" `562 
v L "frequency" 2 692 "int32" `563 
f B "pwm_set_frequency" 2 692 "void(int8 stream,int32 frequency)" `561  "#use capture() Prototypes:"
f N "get_capture_time" 2 695 ""
f B "get_capture_time" 2 695 "int16()" `564 
f N "get_capture_time" 2 696 ""
v L "stream" 2 696 "int8" `566 
f B "get_capture_time" 2 696 "int16(int8 stream)" `565 
f N "get_capture_event" 2 697 ""
f B "get_capture_event" 2 697 "int8()" `567 
f N "get_capture_event" 2 698 ""
v L "stream" 2 698 "int8" `569 
f B "get_capture_event" 2 698 "int8(int8 stream)" `568  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 711 ""
v L "address" 2 711 "int16" `571 
f B "goto_address" 2 711 "void(int16 address)" `570 
f N "label_address" 2 712 ""
v L "label" 2 712 "int16" `573 
f B "label_address" 2 712 "int16(int16 label)" `572  "Program Memory Prototypes:"
f N "read_program_memory" 2 715 ""
v L "address" 2 715 "int16" `575 
v L "dataptr" 2 715 "*int8" `576 
v L "count" 2 715 "int16" `577 
f B "read_program_memory" 2 715 "void(int16 address,*int8 dataptr,int16 count)" `574 
f N "read_program_eeprom" 2 716 ""
v L "address" 2 716 "int16" `579 
f B "read_program_eeprom" 2 716 "int16(int16 address)" `578 
f N "erase_program_eeprom" 2 717 ""
v L "address" 2 717 "int16" `581 
f B "erase_program_eeprom" 2 717 "void(int16 address)" `580 
f N "write_program_memory" 2 718 ""
v L "address" 2 718 "int16" `583 
v L "dataptr" 2 718 "*int8" `584 
v L "count" 2 718 "int16" `585 
f B "write_program_memory" 2 718 "void(int16 address,*int8 dataptr,int16 count)" `582 
f N "write_program_eeprom" 2 719 ""
v L "address" 2 719 "int16" `587 
v L "data" 2 719 "int16" `588 
f B "write_program_eeprom" 2 719 "void(int16 address,int16 data)" `586  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 724 "unsigned int16"
f N "read_eeprom" 2 729 ""
v L "address" 2 729 "int16" `590 
f B "read_eeprom" 2 729 "int8(int16 address)" `589 
f N "write_eeprom" 2 730 ""
v L "address" 2 730 "int16" `592 
v L "value" 2 730 "int8" `593 
f B "write_eeprom" 2 730 "void(int16 address,int8 value)" `591  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 737 ""
v L "interrupt" 2 737 "int32" `595 
f B "enable_interrupts" 2 737 "void(int32 interrupt)" `594 
f N "disable_interrupts" 2 738 ""
v L "interrupt" 2 738 "int32" `597 
f B "disable_interrupts" 2 738 "void(int32 interrupt)" `596 
f N "clear_interrupt" 2 739 ""
v L "interrupt" 2 739 "int32" `599 
f B "clear_interrupt" 2 739 "void(int32 interrupt)" `598 
f N "interrupt_active" 2 740 ""
v L "interrupt" 2 740 "int32" `601 
f B "interrupt_active" 2 740 "int8(int32 interrupt)" `600 
f N "interrupt_enabled" 2 741 ""
v L "interrupt" 2 741 "int32" `603 
f B "interrupt_enabled" 2 741 "int8(int32 interrupt)" `602 
f N "ext_int_edge" 2 742 ""
v L "source" 2 742 "int8" `605 
v L "edge" 2 742 "int8" `606 
f B "ext_int_edge" 2 742 "void(int8 source,int8 edge)" `604 
f N "jump_to_isr" 2 743 ""
v L "address" 2 743 "int16" `608 
f B "jump_to_isr" 2 743 "void(int16 address)" `607  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 745 "0x40"
d G "H_TO_L" 2 746 "0"
d G "GLOBAL" 2 748 "0xF2C0"
d G "PERIPH" 2 749 "0xF240"
d G "INT_RTCC" 2 750 "0x00F220"
d G "INT_TIMER0" 2 751 "0x00F220"
d G "INT_TIMER1" 2 752 "0x009D01"
d G "INT_TIMER2" 2 753 "0x009D02"
d G "INT_TIMER3" 2 754 "0x00A002"
d G "INT_EXT_L2H" 2 755 "0x5000F210"
d G "INT_EXT_H2L" 2 756 "0x6000F210"
d G "INT_EXT" 2 757 "0x00F210"
d G "INT_EXT1_L2H" 2 758 "0x5001F008"
d G "INT_EXT1_H2L" 2 759 "0x6001F008"
d G "INT_EXT1" 2 760 "0x00F008"
d G "INT_EXT2_L2H" 2 761 "0x5002F010"
d G "INT_EXT2_H2L" 2 762 "0x6002F010"
d G "INT_EXT2" 2 763 "0x00F010"
d G "INT_RB" 2 764 "0x00FFF208"
d G "INT_AD" 2 765 "0x009D40"
d G "INT_RDA" 2 766 "0x009D20"
d G "INT_TBE" 2 767 "0x009D10"
d G "INT_SSP" 2 768 "0x009D08"
d G "INT_CCP1" 2 769 "0x009D04"
d G "INT_CCP2" 2 770 "0x00A001"
d G "INT_BUSCOL" 2 771 "0x00A008"
d G "INT_LOWVOLT" 2 772 "0x00A004"
d G "INT_COMP" 2 773 "0x00A040"
d G "INT_EEPROM" 2 774 "0x00A010"
d G "INT_OSCF" 2 775 "0x00A080"
d G "INT_USB" 2 776 "0x00A020"
V G "TBL_POINTER_NEW" 0 4 "int16" `615 
V G "TBL_POINTER_OLD" 0 4 "int16" `616 
V G "SET_FREQ" 0 4 "int16" `617 
V G "TBL_POINTER_SHIFT" 0 4 "int16" `618 
V G "step" 0 4 "int16" `619 
V G "DUTY_CYCLE" 0 4 "int16" `620 
V G "Direction" 0 5 "int1" `621 
V G "start" 0 5 "int1" `622 
V G "sine" 0 7 "[512]" `624 
F N "timer2_isr" 0 24 ""
F G "timer2_isr" 0 25 "void()" `626 
C L "timer2_isr" 0 50 1 "FUNCTION"
C L "timer2_isr" 0 50 1 "FUNCTION"
F N "MAIN" 0 61 ""
F G "MAIN" 0 62 "void()" `627 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
