#include <fast_sine.h>


unsigned int16 TBL_POINTER_NEW, TBL_POINTER_OLD, SET_FREQ, TBL_POINTER_SHIFT,step,DUTY_CYCLE;
int1 Direction,start;
                  
const unsigned int16 sine[512]={0,0,0,0,0,0, 6, 11, 17, 23, 28, 34, 39, 45, 51, 56, 62, 68, 73, 79, 85, 90, 96, 101, 107, 113, 118, 124, 129, 135, 141, 146, 152, 157, 163, 168, 174, 179, 185, 190, 196, 201, 207, 212, 218, 223, 229, 234, 240, 245, 251, 256, 261, 267, 272, 278, 283, 288, 294, 299, 304, 310, 315, 320, 325, 331, 336, 341, 346, 352, 357, 362, 367, 372, 377, 382, 388, 393, 398, 403, 408, 413, 418, 423, 428, 433, 438, 443, 448, 452, 457, 462, 467, 472, 477, 481, 486, 491, 496, 500, 505, 510, 514, 519, 524, 528, 533, 537, 542, 546, 551, 555, 560, 564, 568, 573, 577, 581, 586, 590, 594, 598, 603, 607, 611, 615, 619, 623, 627, 631, 635, 639, 643, 647, 651, 655, 659, 663, 667, 670, 674, 678, 682, 685, 689, 692, 696, 700, 703, 707, 710, 714, 717, 720, 724, 727, 730, 734, 737, 740, 743, 747, 750, 753, 756, 759, 762, 765, 768, 771, 774, 777, 779, 782, 785, 788, 790, 793, 796, 798, 801, 804, 806, 809, 811, 813, 816, 818, 821, 823, 825, 827, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 853, 855, 857, 859, 860, 862, 864, 865, 867, 868, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 889, 890, 891, 892, 893, 893, 894, 895, 895, 896, 896, 897, 897, 898, 898, 898, 899, 899, 899, 899, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 899, 899, 899, 899, 898, 898, 898, 897, 897, 896, 896, 895, 895, 894, 893, 893, 892, 891, 890, 889, 889, 888, 887, 886, 885, 884, 882, 881, 880, 879, 878, 877, 875, 874, 873, 871, 870, 868, 867, 865, 864, 862, 860, 859, 857, 855, 853, 852, 850, 848, 846, 844, 842, 840, 838, 836, 834, 832, 830, 827, 825, 823, 821, 818, 816, 813, 811, 809, 806, 804, 801, 798, 796, 793, 790, 788, 785, 782, 779, 777, 774, 771, 768, 765, 762, 759, 756, 753, 750, 747, 743, 740, 737, 734, 730, 727, 724, 720, 717, 714, 710, 707, 703, 700, 696, 692, 689, 685, 682, 678, 674, 670, 667, 663, 659, 655, 651, 647, 643, 639, 635, 631, 627, 623, 619, 615, 611, 607, 603, 598, 594, 590, 586, 581, 577, 573, 568, 564, 560, 555, 551, 546, 542, 537, 533, 528, 524, 519, 514, 510, 505, 500, 496, 491, 486, 481, 477, 472, 467, 462, 457, 452, 448, 443, 438, 433, 428, 423, 418, 413, 408, 403, 398, 393, 388, 382, 377, 372, 367, 362, 357, 352, 346, 341, 336, 331, 325, 320, 315, 310, 304, 299, 294, 288, 283, 278, 272, 267, 261, 256, 251, 245, 240, 234, 229, 223, 218, 212, 207, 201, 196, 190, 185, 179,
174, 168, 163, 157, 152, 146, 141, 135, 129, 124, 118, 113, 107, 101, 96, 90, 85, 79, 73, 68, 62, 56, 51, 45, 39, 34, 28, 23, 17, 11, 6,  0, 0, 0, 0, 0, 0};

#INT_TIMER2
void timer2_isr()
{
 TBL_POINTER_NEW=TBL_POINTER_OLD +128 ;
 if (TBL_POINTER_NEW < TBL_POINTER_OLD){


           if (Direction == 0){

          
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_PWM);
               
              Direction = 1;

           }

           else{
          
                
             
setup_ccp2(CCP_OFF);
setup_ccp1(CCP_PWM);
                Direction = 0;

           }
 }
 // TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 11;//200     same as divide by 2048 hence 65536/2048 = 32 repeat 5 times
    TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 7;                    //  65536/16
     DUTY_CYCLE= TBL_POINTER_SHIFT;

  set_pwm1_duty(sine[DUTY_CYCLE]); 
  set_pwm2_duty(sine[DUTY_CYCLE]);
     TBL_POINTER_OLD=TBL_POINTER_NEW;
     clear_interrupt(INT_TIMER2);
 }


void main()
{
set_tris_b(0x00);
 setup_timer_2(T2_DIV_BY_1,233,1);
 
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_OFF);

 
enable_interrupts(INT_TIMER2);
enable_interrupts(GLOBAL);

 
   while(TRUE)
   {


      //TODO: User Code
   }

}
