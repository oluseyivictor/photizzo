#include <fast_sine.h>


unsigned int16 TBL_POINTER_NEW, TBL_POINTER_OLD, SET_FREQ, TBL_POINTER_SHIFT,step,DUTY_CYCLE;
int1 Direction,start;
                  
const unsigned int16 sine[512]={ 0, 0, 0, 0, 0, 0, 5, 11, 16, 22, 27, 33, 38, 44, 49, 55, 60, 65, 71, 76, 82, 87, 93, 98, 103, 109, 114, 120, 125, 130, 136, 141, 147, 152, 157, 163, 168, 173, 179, 184, 189, 195, 200, 205, 211, 216, 221, 226, 232, 237, 242, 247, 253, 258, 263, 268, 274, 279, 284, 289, 294, 299, 304, 309, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 384, 389, 394, 399, 404, 409, 414, 418, 423, 428, 433, 437, 442, 447, 451, 456, 461, 465, 470, 475, 479, 484, 488, 493, 497, 502, 506, 510, 515, 519, 524, 528, 532, 537, 541, 545, 549, 554, 558, 562, 566, 570, 574, 578, 583, 587, 591, 595, 599, 603, 606, 610, 614, 618, 622, 626, 629, 633, 637, 641, 644, 648, 652, 655, 659, 662, 666, 669, 673, 676, 680, 683, 686, 690, 693, 696, 700, 703, 706, 709, 712, 716, 719, 722, 725, 728, 731, 734, 737, 739, 742, 745, 748, 751, 753, 756, 759, 761, 764, 767, 769, 772, 774, 777, 779, 782, 784, 786, 789, 791, 793, 795, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 821, 823, 825, 827, 828, 830, 832, 833, 835, 836, 838, 839, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 861, 862, 863, 864, 864, 865, 865, 866, 866, 867, 867, 868, 868, 868, 869, 869, 869, 869, 870, 870, 870, 870, 870, 870, 870, 870, 870, 870, 869, 869, 869, 869, 868, 868, 868, 867, 867, 866, 866, 865, 865, 864, 864, 863, 862, 861, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 847, 846, 845, 843, 842, 841, 839, 838, 836, 835, 833, 832, 830, 828, 827, 825, 823, 821, 820, 818, 816, 814, 812, 810, 808, 806, 804, 802, 800, 798, 795, 793, 791, 789, 786, 784, 782, 779, 777, 774, 772, 769, 767, 764, 761, 759, 756, 753, 751, 748, 745, 742, 739, 737, 734, 731, 728, 725, 722, 719, 716, 712, 709, 706, 703, 700, 696, 693, 690, 686, 683, 680, 676, 673, 669, 666, 662, 659, 655, 652, 648, 644, 641, 637, 633, 629, 626, 622, 618, 614, 610, 606, 603, 599, 595, 591, 587, 583, 578, 574, 570, 566, 562, 558, 554, 549, 545, 541, 537, 532, 528, 524, 519, 515, 510, 506, 502, 497, 493, 488, 484, 479, 475, 470, 465, 461, 456, 451, 447, 442, 437, 433, 428, 423, 418, 414, 409, 404, 399, 394, 389, 384, 380, 375, 370, 365, 360, 355, 350, 345, 340, 335, 330, 325, 320, 315, 309, 304, 299, 294, 289, 284, 279, 274, 268, 263, 258, 253, 247, 242, 237, 232, 226, 221, 216, 211, 205, 200, 195, 189, 184, 179, 173, 168, 163, 157, 152, 147, 
141, 136, 130, 125, 120, 114, 109, 103, 98, 93, 87, 82, 76, 71, 65, 60, 55, 49, 44, 38, 33, 27, 22, 16, 11, 5, 0, 0, 0, 0, 0, 0};
#INT_TIMER2
void timer2_isr()
{
 TBL_POINTER_NEW=TBL_POINTER_OLD +128 ;
 if (TBL_POINTER_NEW < TBL_POINTER_OLD){


           if (Direction == 0){

          
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_PWM);
               
              Direction = 1;

           }

           else{
          
                
             
setup_ccp2(CCP_OFF);
setup_ccp1(CCP_PWM);
                Direction = 0;

           }
 }
 // TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 11;//200     same as divide by 2048 hence 65536/2048 = 32 repeat 5 times
    TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 7;                    //  65536/16
     DUTY_CYCLE= TBL_POINTER_SHIFT;

  set_pwm1_duty(sine[DUTY_CYCLE]); 
  set_pwm2_duty(sine[DUTY_CYCLE]);
     TBL_POINTER_OLD=TBL_POINTER_NEW;
     clear_interrupt(INT_TIMER2);
 }


void main()
{
set_tris_b(0x00);
 setup_timer_2(T2_DIV_BY_1,233,1);
 
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_OFF);

 
enable_interrupts(INT_TIMER2);
enable_interrupts(GLOBAL);

 
   while(TRUE)
   {


      //TODO: User Code
   }

}
