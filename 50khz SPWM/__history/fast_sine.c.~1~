#include <fast_sine.h>


unsigned int16 TBL_POINTER_NEW, TBL_POINTER_OLD, SET_FREQ, TBL_POINTER_SHIFT,step,DUTY_CYCLE;
int1 Direction,start;
                  
const unsigned int16 sine[512]={0, 0, 0, 0, 0, 0, 6, 12, 18, 23, 29, 35, 41, 47, 53, 59, 65, 70, 76, 82, 88, 94, 100, 
105, 111, 117, 123, 129, 135, 140, 146, 152, 158, 163, 169, 175, 181, 187, 192, 198, 204, 210, 215, 221, 227, 232,
238, 244, 249, 255, 261, 266, 272, 277, 283, 289, 294, 300, 305, 311, 316, 322, 327, 333, 338, 344, 349, 355, 360,
366, 371, 376, 382, 387, 392, 398, 403, 408, 414, 419, 424, 429, 435, 440, 445, 450, 455, 460, 465, 471, 476, 481,
486, 491, 496, 501, 506, 511, 515, 520, 525, 530, 535, 540, 544, 549, 554, 559, 563, 568, 573, 577, 582, 587, 591,
596, 600, 605, 609, 614, 618, 622, 627, 631, 635, 640, 644, 648, 652, 657, 661, 665, 669, 673, 677, 681, 685, 689,
693, 697, 701, 705, 709, 713, 716, 720, 724, 728, 731, 735, 739, 742, 746, 749, 753, 756, 760, 763, 766, 770, 773,
776, 780, 783, 786, 789, 792, 796, 799, 802, 805, 808, 811, 814, 816, 819, 822, 825, 828, 830, 833, 836, 838, 841,
843, 846, 849, 851, 853, 856, 858, 860, 863, 865, 867, 869, 872, 874, 876, 878, 880, 882, 884, 886, 888, 889, 891,
893, 895, 896, 898, 900, 901, 903, 904, 906, 907, 909, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923,
924, 925, 926, 927, 928, 928, 929, 930, 930, 931, 932, 932, 933, 933, 934, 934, 934, 935, 935, 935, 935, 936, 936,
936, 936, 936, 936, 936, 936, 936, 936, 935, 935, 935, 935, 934, 934, 934, 933, 933, 932, 932, 931, 930, 930, 929,
928, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 915, 914, 913, 912, 910, 909, 907, 906, 904, 903,
901, 900, 898, 896, 895, 893, 891, 889, 888, 886, 884, 882, 880, 878, 876, 874, 872, 869, 867, 865, 863, 860, 858,
856, 853, 851, 849, 846, 843, 841, 838, 836, 833, 830, 828, 825, 822, 819, 816, 814, 811, 808, 805, 802, 799, 796, 
792, 789, 786, 783, 780, 776, 773, 770, 766, 763, 760, 756, 753, 749, 746, 742, 739, 735, 731, 728, 724, 720, 716,
713, 709, 705, 701, 697, 693, 689, 685, 681, 677, 673, 669, 665, 661, 657, 652, 648, 644, 640, 635, 631, 627, 622,
618, 614, 609, 605, 600, 596, 591, 587, 582, 577, 573, 568, 563, 559, 554, 549, 544, 540, 535, 530, 525, 520, 515,
511, 506, 501, 496, 491, 486, 481, 476, 471, 465, 460, 455, 450, 445, 440, 435, 429, 424, 419, 414, 408, 403, 398,
392, 387, 382, 376, 371, 366, 360, 355, 349, 344, 338, 333, 327, 322, 316, 311, 305, 300, 294, 289, 283, 277, 272,
266, 261, 255, 249, 244, 238, 232, 227, 221, 215, 210, 204, 198, 192, 187, 181, 175, 169, 163, 158, 152, 146, 140,
135, 129, 123, 117, 111, 105, 100, 94, 88, 82, 76, 70, 65, 59, 53, 47, 41, 35, 29, 23, 18, 12, 6, 0, 0, 0, 0, 0, 0};


#INT_TIMER2
void timer2_isr()
{
 TBL_POINTER_NEW=TBL_POINTER_OLD +128 ;
 if (TBL_POINTER_NEW < TBL_POINTER_OLD){


           if (Direction == 0){

          
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_PWM);
               
              Direction = 1;

           }

           else{
          
                
             
setup_ccp2(CCP_OFF);
setup_ccp1(CCP_PWM);
                Direction = 0;

           }
 }
 // TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 11;//200     same as divide by 2048 hence 65536/2048 = 32 repeat 5 times
    TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 7;                    //  65536/16
     DUTY_CYCLE= TBL_POINTER_SHIFT;

  set_pwm1_duty(sine[DUTY_CYCLE]); 
  set_pwm2_duty(sine[DUTY_CYCLE]);
     TBL_POINTER_OLD=TBL_POINTER_NEW;
     clear_interrupt(INT_TIMER2);
 }


void main()
{
set_tris_b(0x00);
 setup_timer_2(T2_DIV_BY_1,233,1);
 
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_OFF);

 
enable_interrupts(INT_TIMER2);
enable_interrupts(GLOBAL);

 
   while(TRUE)
   {


      //TODO: User Code
   }

}
