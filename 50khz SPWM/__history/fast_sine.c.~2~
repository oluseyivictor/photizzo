#include <fast_sine.h>


unsigned int16 TBL_POINTER_NEW, TBL_POINTER_OLD, SET_FREQ, TBL_POINTER_SHIFT,step,DUTY_CYCLE;
int1 Direction,start;
                  
const unsigned int16 sine[512]={ 0, 0, 0, 0, 0, 0,0, 5, 11, 16, 21, 27, 32, 37, 43, 48, 53, 59, 64, 69, 75, 80, 85, 91, 96, 101, 107, 112, 117, 122, 128, 133, 138, 144, 149, 154, 159, 165, 170, 175, 180, 185, 191, 196, 201, 206, 211, 217, 222, 227, 232, 237, 242, 247, 252, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 342, 347, 352, 357, 362, 367, 372, 376, 381, 386, 391, 395, 400, 405, 409, 414, 419, 423, 428, 433, 437, 442, 446, 451, 455, 460, 464, 469, 473, 478, 482, 487, 491, 495, 500, 504, 508, 512, 517, 521, 525, 529, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 590, 593, 597, 601, 605, 609, 612, 616, 620, 623, 627, 630, 634, 638, 641, 645, 648, 652, 655, 658, 662, 665, 668, 672, 675, 678, 681, 685, 688, 691, 694, 697, 700, 703, 706, 709, 712, 715, 718, 721, 723, 726, 729, 732, 734, 737, 740, 742, 745, 747, 750, 752, 755, 757, 760, 762, 764, 767, 769, 771, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 803, 805, 807, 808, 810, 812, 813, 815, 816, 818, 819, 821, 822, 823, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 840, 841, 842, 843, 843, 844, 845, 845, 846, 846, 847, 847, 848, 848, 848, 849, 849, 849, 849, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 849, 849, 849, 849, 848, 848, 848, 847, 847, 846, 846, 845, 845, 844, 843, 843, 842, 841, 840, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 828, 827, 826, 825, 823, 822, 821, 819, 818, 816, 815, 813, 812, 810, 808, 807, 805, 803, 802, 800, 798, 796, 794, 792, 790, 788, 786, 784, 782, 780, 778, 776, 774, 771, 769, 767, 764, 762, 760, 757, 755, 752, 750, 747, 745, 742, 740, 737, 734, 732, 729, 726, 723, 721, 718, 715, 712, 709, 706, 703, 700, 697, 694, 691, 688, 685, 681, 678, 675, 672, 668, 665, 662, 658, 655, 652, 648, 645, 641, 638, 634, 630, 627, 623, 620, 616, 612, 609, 605, 601, 597, 593, 590, 586, 582, 578, 574, 570, 566, 562, 558, 554, 550, 546, 542, 538, 534, 529, 525, 521, 517, 512, 508, 504, 500, 495, 491, 487, 482, 478, 473, 469, 464, 460, 455, 451, 446, 442, 437, 433, 428, 423, 419, 414, 409, 405, 400, 395, 391, 386, 381, 376, 372, 367, 362, 357, 352, 347, 342, 338, 333, 328, 323, 318, 313, 308, 303, 298, 293, 288, 283, 278, 273, 268, 263, 258, 252, 247, 242, 237, 232, 227, 222, 217, 211, 206, 201, 196, 191, 185, 180, 175, 170,
165, 159, 154, 149, 144, 138, 133, 128, 122, 117, 112, 107, 101, 96, 91, 85, 80, 75, 69, 64, 59, 53, 48, 43, 37, 32, 27, 21, 16, 11, 5,  0, 0, 0, 0, 0, 0};


#INT_TIMER2
void timer2_isr()
{
 TBL_POINTER_NEW=TBL_POINTER_OLD +128 ;
 if (TBL_POINTER_NEW < TBL_POINTER_OLD){


           if (Direction == 0){

          
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_PWM);
               
              Direction = 1;

           }

           else{
          
                
             
setup_ccp2(CCP_OFF);
setup_ccp1(CCP_PWM);
                Direction = 0;

           }
 }
 // TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 11;//200     same as divide by 2048 hence 65536/2048 = 32 repeat 5 times
    TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 7;                    //  65536/16
     DUTY_CYCLE= TBL_POINTER_SHIFT;

  set_pwm1_duty(sine[DUTY_CYCLE]); 
  set_pwm2_duty(sine[DUTY_CYCLE]);
     TBL_POINTER_OLD=TBL_POINTER_NEW;
     clear_interrupt(INT_TIMER2);
 }


void main()
{
set_tris_b(0x00);
 setup_timer_2(T2_DIV_BY_1,233,1);
 
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_OFF);

 
enable_interrupts(INT_TIMER2);
enable_interrupts(GLOBAL);

 
   while(TRUE)
   {


      //TODO: User Code
   }

}
