#include <fast_sine.h>


unsigned int16 TBL_POINTER_NEW, TBL_POINTER_OLD, SET_FREQ, TBL_POINTER_SHIFT,step,DUTY_CYCLE;
int1 Direction,start;
                  
const unsigned int16 sine[704]={
0, 63, 125, 186, 245, 302, 356, 406, 453, 495, 532, 564, 591, 612, 628, 637, 640, 637, 628, 612, 591, 564, 532, 495, 453, 406, 356, 302, 245, 186, 125, 63,   //65%
0, 64, 127, 190, 250, 308, 363, 414, 462, 505, 543, 576, 603, 625, 640, 650, 653, 650, 640, 625, 603, 576, 543, 505, 462, 414, 363, 308, 250, 190, 127, 64, //66.5%
0, 65, 130, 193, 255, 314, 370, 423, 471, 515, 554, 587, 615, 637, 653, 663, 666, 663, 653, 637, 615, 587, 554, 515, 471, 423, 370, 314, 255, 193, 130, 65, //68%
0, 67, 132, 197, 260, 320, 377, 431, 480, 525, 565, 599, 627, 650, 666, 676, 679, 676, 666, 650, 627, 599, 565, 525, 480, 431, 377, 320, 260, 197, 132, 67, //69.5%
0, 68, 135, 201, 265, 327, 385, 440, 490, 536, 576, 611, 640, 663, 680, 690, 693, 690, 680, 663, 640, 611, 576, 536, 490, 440, 385, 327, 265, 201, 135, 68, //71%
0, 69, 138, 205, 270, 333, 392, 448, 499, 546, 587, 623, 652, 676, 692, 703, 706, 703, 692, 676, 652, 623, 587, 546, 499, 448, 392, 333, 270, 205, 138, 69, //72.5%
0, 70, 140, 208, 275, 338, 399, 455, 508, 555, 597, 633, 663, 687, 704, 715, 718, 715, 704, 687, 663, 633, 597, 555, 508, 455, 399, 338, 275, 208, 140, 70, //74%
0, 71, 141, 209, 276, 340, 401, 457, 510, 557, 599, 636, 666, 690, 707, 718, 721, 718, 707, 690, 666, 636, 599, 557, 510, 457, 401, 340, 276, 209, 141, 71, //75.5%
0, 72, 143, 213, 281, 346, 408, 466, 519, 567, 610, 647, 678, 702, 720, 730, 734, 730, 720, 702, 678, 647, 610, 567, 519, 466, 408, 346, 281, 213, 143, 72, //77%
0, 73, 146, 217, 286, 352, 415, 474, 528, 577, 621, 659, 690, 715, 733, 743, 747, 743, 733, 715, 690, 659, 621, 577, 528, 474, 415, 352, 286, 217, 146, 73, //78.5%
0, 76, 152, 226, 298, 368, 433, 495, 552, 603, 649, 688, 721, 746, 765, 776, 780, 776, 765, 746, 721, 688, 649, 603, 552, 495, 433, 368, 298, 226, 152, 76, //80%
0, 78, 155, 230, 303, 374, 441, 503, 561, 613, 659, 699, 733, 759, 778, 789, 793, 789, 778, 759, 733, 699, 659, 613, 561, 503, 441, 374, 303, 230, 155, 78, //81.5%
0, 79, 157, 234, 308, 380, 448, 511, 570, 623, 670, 711, 745, 771, 791, 802, 806, 802, 791, 771, 745, 711, 670, 623, 570, 511, 448, 380, 308, 234, 157, 79, // 83%
0, 80, 160, 238, 313, 386, 455, 520, 579, 633, 681, 722, 757, 784, 803, 815, 819, 815, 803, 784, 757, 722, 681, 633, 579, 520, 455, 386, 313, 238, 160, 80,// 84.5
0, 81, 162, 241, 318, 392, 462, 527, 588, 642, 691, 733, 768, 795, 815, 827, 831, 827, 815, 795, 768, 733, 691, 642, 588, 527, 462, 392, 318, 241, 162, 81,//86%
0, 83, 165, 245, 323, 398, 469, 535, 597, 652, 702, 744, 780, 808, 828, 840, 844, 840, 828, 808, 780, 744, 702, 652, 597, 535, 469, 398, 323, 245, 165, 83, //87.5%
0, 84, 167, 249, 328, 404, 476, 544, 606, 662, 713, 756, 792, 820, 841, 853, 857, 853, 841, 820, 792, 756, 713, 662, 606, 544, 476, 404, 328, 249, 167, 84, //89%
0, 85, 170, 253, 333, 410, 483, 552, 615, 673, 723, 767, 804, 833, 853, 866, 870, 866, 853, 833, 804, 767, 723, 673, 615, 552, 483, 410, 333, 253, 170, 85, //90.5
0, 87, 172, 256, 338, 416, 491, 560, 624, 683, 734, 779, 816, 845, 866, 879, 883, 879, 866, 845, 816, 779, 734, 683, 624, 560, 491, 416, 338, 256, 172, 87, //91.5%
0, 88, 175, 260, 343, 422, 498, 568, 634, 693, 745, 790, 828, 857, 879, 892, 896, 892, 879, 857, 828, 790, 745, 693, 634, 568, 498, 422, 343, 260, 175, 88, //93%
0, 89, 177, 264, 348, 428, 505, 577, 643, 703, 756, 802, 840, 870, 892, 905, 909, 905, 892, 870, 840, 802, 756, 703, 643, 577, 505, 428, 348, 264, 177, 89, //94.5%
0, 90, 180, 268, 353, 435, 512, 585, 652, 713, 767, 813, 852, 882, 904, 918, 922, 918, 904, 882, 852, 813, 767, 713, 652, 585, 512, 435, 353, 268, 180, 90 //96%




};
#INT_TIMER2
void timer2_isr()
{
 TBL_POINTER_NEW=TBL_POINTER_OLD +128 ;
 if (TBL_POINTER_NEW < TBL_POINTER_OLD){


           if (Direction == 0){

          
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_PWM);
               
              Direction = 1;

           }

           else{
          
                
             
setup_ccp2(CCP_OFF);
setup_ccp1(CCP_PWM);
                Direction = 0;

           }
 }
 // TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 11;//200     same as divide by 2048 hence 65536/2048 = 32 repeat 5 times
    TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 11;                    //  65536/16
     DUTY_CYCLE= TBL_POINTER_SHIFT;

  set_pwm1_duty(sine[DUTY_CYCLE]); 
  set_pwm2_duty(sine[DUTY_CYCLE]);
     TBL_POINTER_OLD=TBL_POINTER_NEW;
     clear_interrupt(INT_TIMER2);
 }


void main()
{
set_tris_b(0x00);
 setup_timer_2(T2_DIV_BY_1,233,1);
 
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_OFF);

 
enable_interrupts(INT_TIMER2);
enable_interrupts(GLOBAL);

 
   while(TRUE)
   {


      //TODO: User Code
   }

}
