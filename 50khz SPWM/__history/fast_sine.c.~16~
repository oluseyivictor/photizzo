#include <fast_sine.h>


unsigned int16 TBL_POINTER_NEW, TBL_POINTER_OLD, SET_FREQ, TBL_POINTER_SHIFT,step,DUTY_CYCLE;
int1 Direction,start;
                  
const unsigned int16 sine[512]={ 0, 0, 0, 0, 0,0, 5, 11, 16, 21, 27, 32, 37, 43, 48, 53, 59, 64, 69, 75,
80, 85, 90, 96, 101, 106, 112, 117, 122, 127, 133, 138, 143, 148, 154, 159, 164, 169, 175, 180, 185, 190,
195, 201, 206, 211, 216, 221, 226, 232, 237, 242, 247, 252, 257, 262, 267, 272, 277, 282, 287, 292, 297,
302, 307, 312, 317, 322, 327, 332, 337, 342, 347, 352, 356, 361, 366, 371, 376, 380, 385, 390, 395, 399,
404, 409, 413, 418, 423, 427, 432, 436, 441, 446, 450, 455, 459, 464, 468, 473, 477, 481, 486, 490, 494,
499, 503, 507, 512, 516, 520, 524, 528, 533, 537, 541, 545, 549, 553, 557, 561, 565, 569, 573, 577, 581,
585, 589, 593, 596, 600, 604, 608, 611, 615, 619, 622, 626, 630, 633, 637, 640, 644, 647, 651, 654, 657,
661, 664, 667, 671, 674, 677, 680, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 714, 717, 720, 722,
725, 728, 731, 733, 736, 739, 741, 744, 747, 749, 752, 754, 757, 759, 761, 764, 766, 768, 771, 773, 775,
777, 779, 781, 784, 786, 788, 790, 792, 793, 795, 797, 799, 801, 803, 804, 806, 808, 809, 811, 813, 814, 
816, 817, 819, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 835, 836, 837, 838, 839,
840, 841, 842, 842, 843, 844, 844, 845, 845, 846, 846, 847, 847, 848, 848, 848, 849, 849, 849, 849, 849,
850, 850, 850, 850, 850, 850, 850, 850, 849, 849, 849, 849, 849, 848, 848, 848, 847, 847, 846, 846, 845,
845, 844, 844, 843, 842, 842, 841, 840, 839, 838, 837, 836, 835, 835, 833, 832, 831, 830, 829, 828, 827,
825, 824, 823, 821, 820, 819, 817, 816, 814, 813, 811, 809, 808, 806, 804, 803, 801, 799, 797, 795, 793, 792, 790, 788, 786, 784, 781, 779, 777, 775, 773, 771, 768, 766, 764, 761, 759, 757, 754, 752, 749, 747, 744, 741, 739, 736, 733, 731, 728, 725, 722, 720, 717, 714, 711, 708, 705, 702, 699, 696, 693, 690, 687, 684, 680, 677, 674, 671, 667, 664, 661, 657, 654, 651, 647, 644, 640, 637, 633, 630, 626, 622, 619, 615, 611, 608, 604, 600, 596, 593, 589, 585, 581, 577, 573, 569, 565, 561, 557, 553, 549, 545, 541, 537, 533, 528, 524, 520, 516, 512, 507, 503, 499, 494, 490, 486, 481, 477, 473, 468, 464, 459, 455, 450, 446, 441, 436, 432, 427, 423, 418, 413, 409, 404, 399, 395, 390, 385, 380, 376, 371, 366, 361, 356, 352, 347, 342, 337, 332, 327, 322, 317, 312, 307, 302, 297, 292, 287, 282, 277, 272, 267, 262, 257, 252, 247, 242, 237, 232, 226, 221, 216, 211, 206, 201, 195, 190, 185, 180, 175, 169, 164, 159, 154, 148, 143, 138, 133, 127, 122,
117, 112, 106, 101, 96, 90, 85, 80, 75, 69, 64, 59, 53, 48, 43, 37, 32, 27, 21, 16, 11, 5 , 0, 0, 0, 0, 0, 0};
#INT_TIMER2
void timer2_isr()
{
 TBL_POINTER_NEW=TBL_POINTER_OLD +128 ;
 if (TBL_POINTER_NEW < TBL_POINTER_OLD){


           if (Direction == 0){

          
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_PWM);
               
              Direction = 1;

           }

           else{
          
                
             
setup_ccp2(CCP_OFF);
setup_ccp1(CCP_PWM);
                Direction = 0;

           }
 }
 // TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 11;//200     same as divide by 2048 hence 65536/2048 = 32 repeat 5 times
    TBL_POINTER_SHIFT= TBL_POINTER_NEW >> 7;                    //  65536/16
     DUTY_CYCLE= TBL_POINTER_SHIFT;

  set_pwm1_duty(sine[DUTY_CYCLE]); 
  set_pwm2_duty(sine[DUTY_CYCLE]);
     TBL_POINTER_OLD=TBL_POINTER_NEW;
     clear_interrupt(INT_TIMER2);
 }


void main()
{
set_tris_b(0x00);
 setup_timer_2(T2_DIV_BY_1,234,1);
 
setup_ccp1(CCP_OFF);
setup_ccp2(CCP_OFF);

 
enable_interrupts(INT_TIMER2);
enable_interrupts(GLOBAL);

 
   while(TRUE)
   {


      //TODO: User Code
   }

}
