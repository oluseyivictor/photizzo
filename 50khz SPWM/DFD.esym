D G "__PCD__" 0 0 ""5.061""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""29-May-18""
D G "__TIME__" 0 0 ""11:42:35""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the DSPIC30F2010 device ////////////////"
c L "set_tris_b" 2 3 6 "FUNCTION"
f N "set_tris_b" 2 45 ""
v L "value" 2 45 "int16" `53 
f B "set_tris_b" 2 45 "void(int16 value)" `52 
f N "set_tris_c" 2 46 ""
v L "value" 2 46 "int16" `55 
f B "set_tris_c" 2 46 "void(int16 value)" `54 
f N "set_tris_d" 2 47 ""
v L "value" 2 47 "int16" `57 
f B "set_tris_d" 2 47 "void(int16 value)" `56 
f N "set_tris_e" 2 48 ""
v L "value" 2 48 "int16" `59 
f B "set_tris_e" 2 48 "void(int16 value)" `58 
f N "set_tris_f" 2 49 ""
v L "value" 2 49 "int16" `61 
f B "set_tris_f" 2 49 "void(int16 value)" `60 
f N "get_tris_b" 2 50 ""
f B "get_tris_b" 2 50 "int16()" `62 
f N "get_tris_c" 2 51 ""
f B "get_tris_c" 2 51 "int16()" `63 
f N "get_tris_d" 2 52 ""
f B "get_tris_d" 2 52 "int16()" `64 
f N "get_tris_e" 2 53 ""
f B "get_tris_e" 2 53 "int16()" `65 
f N "get_tris_f" 2 54 ""
f B "get_tris_f" 2 54 "int16()" `66 
f N "output_b" 2 55 ""
v L "value" 2 55 "int16" `68 
f B "output_b" 2 55 "void(int16 value)" `67 
f N "output_c" 2 56 ""
v L "value" 2 56 "int16" `70 
f B "output_c" 2 56 "void(int16 value)" `69 
f N "output_d" 2 57 ""
v L "value" 2 57 "int16" `72 
f B "output_d" 2 57 "void(int16 value)" `71 
f N "output_e" 2 58 ""
v L "value" 2 58 "int16" `74 
f B "output_e" 2 58 "void(int16 value)" `73 
f N "output_f" 2 59 ""
v L "value" 2 59 "int16" `76 
f B "output_f" 2 59 "void(int16 value)" `75 
f N "input_b" 2 60 ""
f B "input_b" 2 60 "int16()" `77 
f N "input_c" 2 61 ""
f B "input_c" 2 61 "int16()" `78 
f N "input_d" 2 62 ""
f B "input_d" 2 62 "int16()" `79 
f N "input_e" 2 63 ""
f B "input_e" 2 63 "int16()" `80 
f N "input_f" 2 64 ""
f B "input_f" 2 64 "int16()" `81 
f N "input_change_b" 2 65 ""
f B "input_change_b" 2 65 "sint16()" `82 
f N "input_change_c" 2 66 ""
f B "input_change_c" 2 66 "sint16()" `83 
f N "input_change_d" 2 67 ""
f B "input_change_d" 2 67 "sint16()" `84 
f N "input_change_e" 2 68 ""
f B "input_change_e" 2 68 "sint16()" `85 
f N "input_change_f" 2 69 ""
f B "input_change_f" 2 69 "sint16()" `86 
f N "set_pullup" 2 70 ""
v L "state" 2 70 "int8" `88 
f B "set_pullup" 2 70 "void(int8 state)" `87 
f N "set_pullup" 2 71 ""
v L "state" 2 71 "int8" `90 
v L "pin" 2 71 "int16" `91 
f B "set_pullup" 2 71 "void(int8 state,int16 pin)" `89 
f N "set_pulldown" 2 72 ""
v L "state" 2 72 "int8" `93 
f B "set_pulldown" 2 72 "void(int8 state)" `92 
f N "set_pulldown" 2 73 ""
v L "state" 2 73 "int8" `95 
v L "pin" 2 73 "int16" `96 
f B "set_pulldown" 2 73 "void(int8 state,int16 pin)" `94 
f N "input" 2 74 ""
v L "pin" 2 74 "int16" `98 
f B "input" 2 74 "int8(int16 pin)" `97 
f N "input_state" 2 75 ""
v L "pin" 2 75 "int16" `100 
f B "input_state" 2 75 "int8(int16 pin)" `99 
f N "output_low" 2 76 ""
v L "pin" 2 76 "int16" `102 
f B "output_low" 2 76 "void(int16 pin)" `101 
f N "output_high" 2 77 ""
v L "pin" 2 77 "int16" `104 
f B "output_high" 2 77 "void(int16 pin)" `103 
f N "output_toggle" 2 78 ""
v L "pin" 2 78 "int16" `106 
f B "output_toggle" 2 78 "void(int16 pin)" `105 
f N "output_bit" 2 79 ""
v L "pin" 2 79 "int16" `108 
v L "level" 2 79 "int8" `109 
f B "output_bit" 2 79 "void(int16 pin,int8 level)" `107 
f N "output_float" 2 80 ""
v L "pin" 2 80 "int16" `111 
f B "output_float" 2 80 "void(int16 pin)" `110 
f N "output_drive" 2 81 ""
v L "pin" 2 81 "int16" `113 
f B "output_drive" 2 81 "void(int16 pin)" `112  "Constants used to identify pins in the above are:"
d G "PIN_B0" 2 84 "5696"
d G "PIN_B1" 2 85 "5697"
d G "PIN_B2" 2 86 "5698"
d G "PIN_B3" 2 87 "5699"
d G "PIN_B4" 2 88 "5700"
d G "PIN_B5" 2 89 "5701"
d G "PIN_C13" 2 91 "5757"
d G "PIN_C14" 2 92 "5758"
d G "PIN_C15" 2 93 "5759"
d G "PIN_D0" 2 95 "5792"
d G "PIN_D1" 2 96 "5793"
d G "PIN_E0" 2 98 "5840"
d G "PIN_E1" 2 99 "5841"
d G "PIN_E2" 2 100 "5842"
d G "PIN_E3" 2 101 "5843"
d G "PIN_E4" 2 102 "5844"
d G "PIN_E5" 2 103 "5845"
d G "PIN_E8" 2 104 "5848"
d G "PIN_F2" 2 106 "5890"
d G "PIN_F3" 2 107 "5891"
d G "FALSE" 2 110 "0"
d G "TRUE" 2 111 "1"
d G "BYTE" 2 113 "unsigned int8"
d G "BOOLEAN" 2 114 "int1"
d G "getc" 2 116 "getch"
d G "fgetc" 2 117 "getch"
d G "getchar" 2 118 "getch"
d G "putc" 2 119 "putchar"
d G "fputc" 2 120 "putchar"
d G "fgets" 2 121 "gets"
d G "fputs" 2 122 "puts"
c L "output_drive" 2 3 2 "FUNCTION"
f N "setup_uart" 2 126 ""
v L "baud" 2 126 "int32" `115 
f B "setup_uart" 2 126 "void(int32 baud)" `114 
f N "setup_uart" 2 127 ""
v L "baud" 2 127 "int32" `117 
v L "stream" 2 127 "int8" `118 
f B "setup_uart" 2 127 "void(int32 baud,int8 stream)" `116 
f N "setup_uart" 2 128 ""
v L "baud" 2 128 "int32" `120 
v L "stream" 2 128 "int8" `121 
v L "clock" 2 128 "int32" `122 
f B "setup_uart" 2 128 "void(int32 baud,int8 stream,int32 clock)" `119 
f N "set_uart_speed" 2 129 ""
v L "baud" 2 129 "int32" `124 
f B "set_uart_speed" 2 129 "void(int32 baud)" `123 
f N "set_uart_speed" 2 130 ""
v L "baud" 2 130 "int32" `126 
v L "stream" 2 130 "int8" `127 
f B "set_uart_speed" 2 130 "void(int32 baud,int8 stream)" `125 
f N "set_uart_speed" 2 131 ""
v L "baud" 2 131 "int32" `129 
v L "stream" 2 131 "int8" `130 
v L "clock" 2 131 "int32" `131 
f B "set_uart_speed" 2 131 "void(int32 baud,int8 stream,int32 clock)" `128  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 135 "2"
d G "UART_DATA" 2 136 "4"
d G "UART_AUTODETECT" 2 137 "8"
d G "UART_AUTODETECT_NOWAIT" 2 138 "9"
d G "UART_WAKEUP_ON_RDA" 2 139 "10"
d G "UART_SEND_BREAK" 2 140 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_wdt" 2 145 ""
v L "mode" 2 145 "int8" `133 
f B "setup_wdt" 2 145 "void(int8 mode)" `132 
f N "restart_wdt" 2 146 ""
f B "restart_wdt" 2 146 "void()" `134  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 148 "1"
d G "WDT_OFF" 2 149 "0"
d G "WDT_2MS" 2 151 "0x022"
d G "WDT_4MS" 2 152 "0x023"
d G "WDT_8MS" 2 153 "0x025"
d G "WDT_16MS" 2 154 "0x029"
d G "WDT_32MS" 2 155 "0x031"
d G "WDT_64MS" 2 156 "0x045"
d G "WDT_128MS" 2 157 "0x049"
d G "WDT_256MS" 2 158 "0x051"
d G "WDT_512MS" 2 159 "0x065"
d G "WDT_1S" 2 160 "0x069"
d G "WDT_2S" 2 161 "0x071"
d G "WDT_4S" 2 162 "0x085"
d G "WDT_8S" 2 163 "0x089"
d G "WDT_16S" 2 164 "0x091"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "restart_cause" 2 169 ""
f B "restart_cause" 2 169 "int8()" `135 
f N "reset_cpu" 2 170 ""
f B "reset_cpu" 2 170 "void()" `136 
f N "sleep" 2 171 ""
f B "sleep" 2 171 "void()" `137 
f N "sleep" 2 172 ""
v L "mode" 2 172 "int8" `139 
f B "sleep" 2 172 "void(int8 mode)" `138  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 2 174 "0"
d G "RESTART_BROWNOUT" 2 175 "1"
d G "RESTART_WATCHDOG" 2 176 "4"
d G "RESTART_SOFTWARE" 2 177 "6"
d G "RESTART_MCLR" 2 178 "7"
d G "RESTART_ILLEGAL_OP" 2 179 "14"
d G "RESTART_TRAP_CONFLICT" 2 180 "15"
d G "SLEEP_FULL" 2 183 "0" "Default"
d G "SLEEP_IDLE" 2 184 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 190 ""
v L "type" 2 190 "int8" `141 
v L "target" 2 190 "int32" `142 
f B "setup_oscillator" 2 190 "void(int8 type,int32 target)" `140 
f N "setup_oscillator" 2 191 ""
v L "type" 2 191 "int8" `144 
v L "target" 2 191 "int32" `145 
v L "source" 2 191 "int32" `146 
f B "setup_oscillator" 2 191 "void(int8 type,int32 target,int32 source)" `143  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 2 193 "32"
d G "OSC_CRYSTAL" 2 194 "1"
d G "OSC_CLOCK" 2 195 "2"
d G "OSC_RC" 2 196 "3"
d G "OSC_SECONDARY" 2 197 "16"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_timer1" 2 203 ""
v L "mode" 2 203 "int16" `148 
f B "setup_timer1" 2 203 "void(int16 mode)" `147 
f N "setup_timer1" 2 204 ""
v L "mode" 2 204 "int16" `150 
v L "period" 2 204 "int16" `151 
f B "setup_timer1" 2 204 "void(int16 mode,int16 period)" `149 
f N "get_timer1" 2 205 ""
f B "get_timer1" 2 205 "int16()" `152 
f N "set_timer1" 2 206 ""
v L "value" 2 206 "int16" `154 
f B "set_timer1" 2 206 "void(int16 value)" `153 
f N "setup_timer2" 2 207 ""
v L "mode" 2 207 "int16" `156 
f B "setup_timer2" 2 207 "void(int16 mode)" `155 
f N "setup_timer2" 2 208 ""
v L "mode" 2 208 "int16" `158 
v L "period" 2 208 "int16" `159 
f B "setup_timer2" 2 208 "void(int16 mode,int16 period)" `157 
f N "get_timer2" 2 209 ""
f B "get_timer2" 2 209 "int16()" `160 
f N "set_timer2" 2 210 ""
v L "value" 2 210 "int16" `162 
f B "set_timer2" 2 210 "void(int16 value)" `161 
f N "setup_timer3" 2 211 ""
v L "mode" 2 211 "int16" `164 
f B "setup_timer3" 2 211 "void(int16 mode)" `163 
f N "setup_timer3" 2 212 ""
v L "mode" 2 212 "int16" `166 
v L "period" 2 212 "int16" `167 
f B "setup_timer3" 2 212 "void(int16 mode,int16 period)" `165 
f N "get_timer3" 2 213 ""
f B "get_timer3" 2 213 "int16()" `168 
f N "set_timer3" 2 214 ""
v L "value" 2 214 "int16" `170 
f B "set_timer3" 2 214 "void(int16 value)" `169 
f N "get_timer23" 2 215 ""
f B "get_timer23" 2 215 "int32()" `171 
f N "set_timer23" 2 216 ""
v L "value" 2 216 "int32" `173 
f B "set_timer23" 2 216 "void(int32 value)" `172  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 2 219 "0x0000"
d G "TMR_INTERNAL" 2 220 "0x8000"
d G "TMR_EXTERNAL" 2 221 "0x8002"
d G "TMR_EXTERNAL_SYNC" 2 222 "0x8006" "This only applies to Timer1"
d G "TMR_EXTERNAL_RTC" 2 223 "0xC002" "This only applies to Timer1"
d G "TMR_DIV_BY_1" 2 225 "0x0000"
d G "TMR_DIV_BY_8" 2 226 "0x0010"
d G "TMR_DIV_BY_64" 2 227 "0x0020"
d G "TMR_DIV_BY_256" 2 228 "0x0030"
d G "TMR_HALT_IDLE" 2 230 "0x2000"
d G "TMR_CONTINUE_IDLE" 2 231 "0x0000"
d G "TMR_32_BIT" 2 233 "0x0008" "Only for even numbered timers"
d G "TMR_GATE" 2 234 "0x0040"
c L "set_timer23" 2 3 3 "FUNCTION"
f N "setup_capture" 2 239 ""
v L "module" 2 239 "int8" `175 
v L "mode" 2 239 "int16" `176 
f B "setup_capture" 2 239 "void(int8 module,int16 mode)" `174 
f N "get_capture" 2 240 ""
v L "module" 2 240 "int8" `178 
f B "get_capture" 2 240 "int16(int8 module)" `177 
f N "get_capture" 2 241 ""
v L "module" 2 241 "int8" `180 
v L "wait" 2 241 "int8" `181 
f B "get_capture" 2 241 "int16(int8 module,int8 wait)" `179  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 2 243 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 2 244 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 2 245 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 2 246 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 2 247 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 2 248 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 2 249 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 2 252 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 2 253 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 2 254 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 2 255 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 2 258 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 2 259 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 2 262 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 2 263 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 2 3 3 "FUNCTION"
f N "setup_compare" 2 268 ""
v L "module" 2 268 "int8" `183 
v L "mode" 2 268 "int16" `184 
f B "setup_compare" 2 268 "void(int8 module,int16 mode)" `182 
f N "set_pwm_duty" 2 269 ""
v L "module" 2 269 "int8" `186 
v L "duty" 2 269 "int16" `187 
f B "set_pwm_duty" 2 269 "void(int8 module,int16 duty)" `185 
f N "set_compare_time" 2 270 ""
v L "module" 2 270 "int8" `189 
v L "ocr" 2 270 "int16" `190 
f B "set_compare_time" 2 270 "void(int8 module,int16 ocr)" `188 
f N "set_compare_time" 2 271 ""
v L "module" 2 271 "int8" `192 
v L "ocr" 2 271 "int16" `193 
v L "ocrs" 2 271 "int16" `194 
f B "set_compare_time" 2 271 "void(int8 module,int16 ocr,int16 ocrs)" `191  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 2 273 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 2 274 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 2 275 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGLE" 2 276 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 2 277 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 2 278 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 2 279 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 2 280 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 2 283 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 2 284 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 2 287 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 2 288 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 2 3 3 "FUNCTION"
f N "setup_spi" 2 293 ""
v L "mode" 2 293 "int16" `196 
f B "setup_spi" 2 293 "void(int16 mode)" `195 
f N "spi_write" 2 294 ""
v L "data" 2 294 "int8" `198 
f B "spi_write" 2 294 "void(int8 data)" `197 
f N "spi_write" 2 295 ""
v L "wait" 2 295 "int8" `200 
v L "data" 2 295 "int8" `201 
f B "spi_write" 2 295 "void(int8 wait,int8 data)" `199 
f N "spi_write_16" 2 296 ""
v L "data" 2 296 "int16" `203 
f B "spi_write_16" 2 296 "void(int16 data)" `202 
f N "spi_write_16" 2 297 ""
v L "wait" 2 297 "int8" `205 
v L "data" 2 297 "int16" `206 
f B "spi_write_16" 2 297 "void(int8 wait,int16 data)" `204 
f N "spi_read" 2 298 ""
f B "spi_read" 2 298 "int8()" `207 
f N "spi_read" 2 299 ""
v L "data" 2 299 "int8" `209 
f B "spi_read" 2 299 "int8(int8 data)" `208 
f N "spi_read_16" 2 300 ""
f B "spi_read_16" 2 300 "int16()" `210 
f N "spi_read_16" 2 301 ""
v L "data" 2 301 "int16" `212 
f B "spi_read_16" 2 301 "int16(int16 data)" `211 
f N "spi_data_is_in" 2 302 ""
f B "spi_data_is_in" 2 302 "int8()" `213  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 2 305 "0x0020"
d G "SPI_SLAVE" 2 306 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 2 308 "0x0040"
d G "SPI_SCK_IDLE_LOW" 2 309 "0x0000"
d G "SPI_XMIT_L_TO_H" 2 311 "0x0100"
d G "SPI_XMIT_H_TO_L" 2 312 "0x0000"
d G "SPI_MODE_16B" 2 314 "0x0400"
d G "SPI_MODE_8B" 2 315 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 317 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 2 318 "0x0000"
d G "SPI_SS_ENABLED" 2 320 "0x0000"
d G "SPI_SS_DISABLED" 2 321 "0x0080"
d G "SPI_CLK_DIV_1" 2 324 "0x001F"
d G "SPI_CLK_DIV_2" 2 325 "0x001B"
d G "SPI_CLK_DIV_3" 2 326 "0x0017"
d G "SPI_CLK_DIV_4" 2 327 "0x001E"
d G "SPI_CLK_DIV_5" 2 328 "0x000F"
d G "SPI_CLK_DIV_6" 2 329 "0x000B"
d G "SPI_CLK_DIV_7" 2 330 "0x0007"
d G "SPI_CLK_DIV_8" 2 331 "0x0003"
d G "SPI_CLK_DIV_12" 2 332 "0x0016"
d G "SPI_CLK_DIV_16" 2 333 "0x001D"
d G "SPI_CLK_DIV_20" 2 334 "0x000E"
d G "SPI_CLK_DIV_24" 2 335 "0x000A"
d G "SPI_CLK_DIV_28" 2 336 "0x0006"
d G "SPI_CLK_DIV_32" 2 337 "0x0002"
d G "SPI_CLK_DIV_48" 2 338 "0x0015"
d G "SPI_CLK_DIV_64" 2 339 "0x001C"
d G "SPI_CLK_DIV_80" 2 340 "0x000D"
d G "SPI_CLK_DIV_96" 2 341 "0x0009"
d G "SPI_CLK_DIV_112" 2 342 "0x0005"
d G "SPI_CLK_DIV_128" 2 343 "0x0001"
d G "SPI_CLK_DIV_192" 2 344 "0x0014"
d G "SPI_CLK_DIV_256" 2 345 "0x0010"
d G "SPI_CLK_DIV_320" 2 346 "0x000C"
d G "SPI_CLK_DIV_384" 2 347 "0x0008"
d G "SPI_CLK_DIV_448" 2 348 "0x0004"
d G "SPI_CLK_DIV_512" 2 349 "0x0000"
d G "SPI_L_TO_H" 2 352 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 353 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 4 "FUNCTION"
f N "setup_adc" 2 359 ""
v L "mode" 2 359 "int32" `215 
f B "setup_adc" 2 359 "void(int32 mode)" `214 
f N "setup_adc_ports" 2 360 ""
v L "pins" 2 360 "int32" `217 
f B "setup_adc_ports" 2 360 "void(int32 pins)" `216 
f N "setup_adc_ports" 2 361 ""
v L "pins" 2 361 "int32" `219 
v L "reference" 2 361 "int16" `220 
f B "setup_adc_ports" 2 361 "void(int32 pins,int16 reference)" `218 
f N "set_adc_channel" 2 362 ""
v L "channel" 2 362 "int8" `222 
f B "set_adc_channel" 2 362 "void(int8 channel)" `221 
f N "set_adc_channel" 2 363 ""
v L "channel" 2 363 "int8" `224 
v L "neg_channel" 2 363 "int8" `225 
f B "set_adc_channel" 2 363 "void(int8 channel,int8 neg_channel)" `223 
f N "read_adc" 2 364 ""
f B "read_adc" 2 364 "int16()" `226 
f N "read_adc" 2 365 ""
v L "mode" 2 365 "int8" `228 
f B "read_adc" 2 365 "int16(int8 mode)" `227 
f N "adc_done" 2 366 ""
f B "adc_done" 2 366 "int8()" `229  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 370 "0x10000"
d G "ADC_CLOCK" 2 371 "0x0000"
d G "ADC_CLOCK_DIV_2" 2 372 "0x0001"
d G "ADC_CLOCK_DIV_4" 2 373 "0x0003"
d G "ADC_CLOCK_DIV_8" 2 374 "0x0007"
d G "ADC_CLOCK_DIV_16" 2 375 "0x000F"
d G "ADC_CLOCK_DIV_32" 2 376 "0x001F"
d G "ADC_CLOCK_DIV_64" 2 377 "0x003F"
d G "ADC_CLOCK_INTERNAL" 2 378 "0x0080" "Internal"
d G "ADC_TAD_MUL_0" 2 382 "0x1F00"
d G "ADC_TAD_MUL_2" 2 383 "0x1D00"
d G "ADC_TAD_MUL_4" 2 384 "0x1B00"
d G "ADC_TAD_MUL_8" 2 385 "0x1700"
d G "ADC_TAD_MUL_16" 2 386 "0x0F00"
d G "ADC_TAD_MUL_31" 2 387 "0x0000"
d G "ADC_START_AND_READ" 2 390 "0x07"
d G "ADC_START_ONLY" 2 391 "0x01"
d G "ADC_READ_ONLY" 2 392 "0x06"
d G "VSS" 2 395 "0"
d G "NO_ANALOGS" 2 400 "0" "None"
d G "ALL_ANALOG" 2 401 "0xFFFFFFFF" "All"
d G "sAN0" 2 402 "0x00000001" "| B0"
d G "sAN1" 2 403 "0x00000002" "| B1"
d G "sAN2" 2 404 "0x00000004" "| B2"
d G "sAN3" 2 405 "0x00000008" "| B3"
d G "sAN4" 2 406 "0x00000010" "| B4"
d G "sAN5" 2 407 "0x00000020" "| B5"
d G "VSS_VDD" 2 410 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 2 411 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 2 412 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 2 413 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 3 4 "FUNCTION"
f N "setup_qei" 2 419 ""
v L "mode" 2 419 "int16" `231 
v L "filter" 2 419 "int16" `232 
v L "maxcount" 2 419 "int16" `233 
f B "setup_qei" 2 419 "void(int16 mode,int16 filter,int16 maxcount)" `230 
f N "setup_qei" 2 420 ""
v L "unit" 2 420 "int8" `235 
v L "mode" 2 420 "int16" `236 
v L "filter" 2 420 "int16" `237 
v L "maxcount" 2 420 "int16" `238 
f B "setup_qei" 2 420 "void(int8 unit,int16 mode,int16 filter,int16 maxcount)" `234 
f N "qei_set_count" 2 421 ""
v L "count" 2 421 "int16" `240 
f B "qei_set_count" 2 421 "void(int16 count)" `239 
f N "qei_set_count" 2 422 ""
v L "unit" 2 422 "int8" `242 
v L "count" 2 422 "int16" `243 
f B "qei_set_count" 2 422 "void(int8 unit,int16 count)" `241 
f N "qei_get_count" 2 423 ""
f B "qei_get_count" 2 423 "int16()" `244 
f N "qei_get_count" 2 424 ""
v L "unit" 2 424 "int8" `246 
f B "qei_get_count" 2 424 "int16(int8 unit)" `245 
f N "qei_status" 2 425 ""
f B "qei_status" 2 425 "int16()" `247 
f N "qei_status" 2 426 ""
v L "unit" 2 426 "int8" `249 
f B "qei_status" 2 426 "int16(int8 unit)" `248  "Constants used in setup_qei() first param are:"
d G "QEI_DISABLED" 2 428 "0"
d G "QEI_MODE_X2" 2 429 "0x0400"
d G "QEI_MODE_X4" 2 430 "0x0600"
d G "QEI_MODE_TIMER" 2 431 "0x0100"
d G "QEI_STOP_WHEN_IDLE" 2 432 "0x2000"
d G "QEI_SWAP_AB" 2 433 "0x0080"
d G "QEI_OUTPUT_ENABLE" 2 434 "0x0040"
d G "QEI_RESET_WHEN_MAXCOUNT" 2 435 "0x0100"
d G "QEI_RESET_WHEN_IDX_PULSE" 2 436 "0x0004"
d G "QEI_TIMER_GATED" 2 437 "0x0020"
d G "QEI_TIMER_INTERNAL" 2 438 "0x0000"
d G "QEI_TIMER_EXTERNAL" 2 439 "0x0002"
d G "QEI_TIMER_DIV_BY_1" 2 440 "0x0000"
d G "QEI_TIMER_DIV_BY_8" 2 441 "0x0008"
d G "QEI_TIMER_DIV_BY_64" 2 442 "0x0010"
d G "QEI_TIMER_DIV_BY_256" 2 443 "0x0018"
d G "QEI_FILTER_DIV_1" 2 445 "0x0000"
d G "QEI_FILTER_DIV_2" 2 446 "0x0010"
d G "QEI_FILTER_DIV_4" 2 447 "0x0020"
d G "QEI_FILTER_DIV_16" 2 448 "0x0030"
d G "QEI_FILTER_DIV_32" 2 449 "0x0040"
d G "QEI_FILTER_DIV_64" 2 450 "0x0050"
d G "QEI_FILTER_DIV_128" 2 451 "0x0060"
d G "QEI_FILTER_DIV_256" 2 452 "0x0070"
d G "QEI_FILTER_OUTPUT" 2 453 "0x0080"
d G "QEI_NO_ERROR_INTS" 2 454 "0x0100"
d G "QEI_IDX_WHEN_A0" 2 455 "0x0000" "for 2X mode"
d G "QEI_IDX_WHEN_A1" 2 456 "0x0200" "for 2X mode"
d G "QEI_IDX_WHEN_B0" 2 457 "0x0400" "for 2X mode"
d G "QEI_IDX_WHEN_B1" 2 458 "0x0600" "for 2X mode"
d G "QEI_IDX_WHEN_A0_B0" 2 459 "0x0000" "for 4X mode"
d G "QEI_IDX_WHEN_A1_B0" 2 460 "0x0200" "for 4X mode"
d G "QEI_IDX_WHEN_A0_B1" 2 461 "0x0400" "for 4X mode"
d G "QEI_IDX_WHEN_A1_B1" 2 462 "0x0600" "for 4X mode"
d G "QEI_POS_ERROR" 2 464 "0x8000"
d G "QEI_FORWARD" 2 465 "0x0800"
d G "QEI_INDEX_PIN" 2 466 "0x1000"
c L "qei_status" 2 3 5 "FUNCTION"
f N "setup_motor_pwm" 2 473 ""
v L "pwm" 2 473 "int8" `251 
v L "mode" 2 473 "int32" `252 
v L "timebase" 2 473 "int32" `253 
f B "setup_motor_pwm" 2 473 "void(int8 pwm,int32 mode,int32 timebase)" `250 
f N "setup_motor_pwm" 2 474 ""
v L "pwm" 2 474 "int8" `255 
v L "mode" 2 474 "int32" `256 
v L "prescale" 2 474 "int8" `257 
v L "postscale" 2 474 "int8" `258 
v L "period" 2 474 "int16" `259 
f B "setup_motor_pwm" 2 474 "void(int8 pwm,int32 mode,int8 prescale,int8 postscale,int16 period)" `254 
f N "set_motor_unit" 2 475 ""
v L "pwm" 2 475 "int8" `261 
v L "pin_pair" 2 475 "int8" `262 
v L "mode" 2 475 "int16" `263 
v L "active_deadtime" 2 475 "int8" `264 
v L "inactive_deadtime" 2 475 "int8" `265 
f B "set_motor_unit" 2 475 "void(int8 pwm,int8 pin_pair,int16 mode,int8 active_deadtime,int8 inactive_deadtime)" `260 
f N "set_motor_pwm_duty" 2 476 ""
v L "pwm" 2 476 "int8" `267 
v L "pin_pair" 2 476 "int8" `268 
v L "duty" 2 476 "int16" `269 
f B "set_motor_pwm_duty" 2 476 "void(int8 pwm,int8 pin_pair,int16 duty)" `266 
f N "set_motor_pmw_event" 2 477 ""
v L "??65535" 2 477 "int8" `271 
v L "time" 2 477 "sint16" `272 
f B "set_motor_pmw_event" 2 477 "void(int8 ,sint16 time)" `270 
f N "get_motor_pwm_count" 2 478 ""
v L "pwm" 2 478 "int8" `274 
f B "get_motor_pwm_count" 2 478 "int16(int8 pwm)" `273  "Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):"
d G "MPWM_DISABLED" 2 480 "0"
d G "MPWM_FREE_RUN" 2 481 "0x8000"
d G "MPWM_SINGLE_PULSE" 2 482 "0x8001"
d G "MPWM_UP_DOWN" 2 483 "0x8002"
d G "MPWM_UP_DOWN_WITH_INTS" 2 484 "0x8003"
d G "MPWM_HALT_WHEN_IDLE" 2 486 "0x2000"
d G "MPWM_DUTY_UPDATES_IMMEADIATE" 2 487 "0x40000"
d G "MPWM_SYNC_OVERRIDES" 2 488 "0x20000"
d G "MPWM_DISABLE_UPDATES" 2 489 "0x10000"
d G "MPWM_LATCH_FAULTS" 2 490 "0x100000"
d G "MPWM_INDEPENDENT" 2 493 "0x0001"
d G "MPWM_ENABLE" 2 494 "0x0006" "both H and L"
d G "MPWM_ENABLE_H" 2 495 "0x0004"
d G "MPWM_ENABLE_L" 2 496 "0x0002"
d G "MPWM_FORCE_L_0" 2 498 "0x0010"
d G "MPWM_FORCE_L_1" 2 499 "0x0050"
d G "MPWM_FORCE_H_0" 2 500 "0x0020"
d G "MPWM_FORCE_H_1" 2 501 "0x00A0"
d G "MPWM_FAULTA_LA_HA" 2 503 "0x0700"
d G "MPWM_FAULTA_LA_HI" 2 504 "0x0500"
d G "MPWM_FAULTA_LI_HA" 2 505 "0x0600"
d G "MPWM_FAULTA_LI_HI" 2 506 "0x0400"
d G "MPWM_FAULTB_LA_HA" 2 507 "0x7000"
d G "MPWM_FAULTB_LA_HI" 2 508 "0x5000"
d G "MPWM_FAULTB_LI_HA" 2 509 "0x6000"
d G "MPWM_FAULTB_LI_HI" 2 510 "0x4000"
d G "MPWM_FAULT_NO_CHANGE" 2 511 "0x0000"
c L "get_motor_pwm_count" 2 3 3 "FUNCTION"
f N "abs" 2 517 ""
v L "x" 2 517 "sint8" `276 
f B "abs" 2 517 "sint8(sint8 x)" `275 
f N "abs" 2 518 ""
v L "x" 2 518 "sint16" `278 
f B "abs" 2 518 "sint16(sint16 x)" `277 
f N "abs" 2 519 ""
v L "x" 2 519 "sint32" `280 
f B "abs" 2 519 "sint32(sint32 x)" `279 
f N "abs" 2 520 ""
v L "x" 2 520 "float" `282 
f B "abs" 2 520 "float(float x)" `281 
f N "_mul" 2 521 ""
v L "??65535" 2 521 "int8" `284 
v L "??65535" 2 521 "int8" `285 
f B "_mul" 2 521 "int16(int8 ,int8 )" `283 
f N "_mul" 2 522 ""
v L "??65535" 2 522 "sint8" `287 
v L "??65535" 2 522 "sint8" `288 
f B "_mul" 2 522 "sint16(sint8 ,sint8 )" `286 
f N "_mul" 2 523 ""
v L "??65535" 2 523 "int16" `290 
v L "??65535" 2 523 "int16" `291 
f B "_mul" 2 523 "int32(int16 ,int16 )" `289 
f N "_mul" 2 524 ""
v L "??65535" 2 524 "sint16" `293 
v L "??65535" 2 524 "sint16" `294 
f B "_mul" 2 524 "sint32(sint16 ,sint16 )" `292 
f N "abs" 2 525 ""
v L "x" 2 525 "?" `296 
f B "abs" 2 525 "?(? x)" `295 
f N "abs" 2 526 ""
v L "x" 2 526 "?" `298 
f B "abs" 2 526 "?(? x)" `297 
f N "abs" 2 527 ""
v L "x" 2 527 "?" `300 
f B "abs" 2 527 "?(? x)" `299 
f N "abs" 2 528 ""
v L "x" 2 528 "?" `302 
f B "abs" 2 528 "?(? x)" `301 
f N "_mul" 2 529 ""
v L "??65535" 2 529 "int32" `304 
v L "??65535" 2 529 "int32" `305 
f B "_mul" 2 529 "?(int32 ,int32 )" `303 
f N "_mul" 2 530 ""
v L "??65535" 2 530 "sint32" `307 
v L "??65535" 2 530 "sint32" `308 
f B "_mul" 2 530 "?(sint32 ,sint32 )" `306 
f N "_mul" 2 531 ""
v L "??65535" 2 531 "?" `310 
v L "??65535" 2 531 "?" `311 
f B "_mul" 2 531 "?(? ,? )" `309 
f N "_mul" 2 532 ""
v L "??65535" 2 532 "?" `313 
v L "??65535" 2 532 "?" `314 
f B "_mul" 2 532 "?(? ,? )" `312  "Memory Manipulation Prototypes:"
f N "strcpy" 2 535 ""
v L "dest" 2 535 "*sint8" `316 
v L "src" 2 535 "*sint8" `317 
f B "strcpy" 2 535 "void(*sint8 dest,*sint8 src)" `315 
f N "memset" 2 536 ""
v L "destination" 2 536 "*int8" `319 
v L "value" 2 536 "int8" `320 
v L "num" 2 536 "int16" `321 
f B "memset" 2 536 "void(*int8 destination,int8 value,int16 num)" `318 
f N "memcpy" 2 537 ""
v L "destination" 2 537 "*int8" `323 
v L "source" 2 537 "*int8" `324 
v L "num" 2 537 "int16" `325 
f B "memcpy" 2 537 "void(*int8 destination,*int8 source,int16 num)" `322  "Data Manipulators Prototypes:"
f N "shift_left" 2 540 ""
v L "address" 2 540 "*int8" `327 
v L "bytes" 2 540 "int8" `328 
v L "value" 2 540 "int8" `329 
f B "shift_left" 2 540 "int8(*int8 address,int8 bytes,int8 value)" `326 
f N "shift_right" 2 541 ""
v L "address" 2 541 "*int8" `331 
v L "bytes" 2 541 "int8" `332 
v L "value" 2 541 "int8" `333 
f B "shift_right" 2 541 "int8(*int8 address,int8 bytes,int8 value)" `330 
f N "rotate_left" 2 542 ""
v L "address" 2 542 "*int8" `335 
v L "bytes" 2 542 "int8" `336 
f B "rotate_left" 2 542 "void(*int8 address,int8 bytes)" `334 
f N "rotate_right" 2 543 ""
v L "address" 2 543 "*int8" `338 
v L "bytes" 2 543 "int8" `339 
f B "rotate_right" 2 543 "void(*int8 address,int8 bytes)" `337 
f N "swap" 2 544 ""
v L "value" 2 544 "int8" `341 
f B "swap" 2 544 "void(int8 value)" `340 
f N "make8" 2 545 ""
v L "var" 2 545 "int16" `343 
v L "offset" 2 545 "int8" `344 
f B "make8" 2 545 "int8(int16 var,int8 offset)" `342 
f N "make8" 2 546 ""
v L "var" 2 546 "int32" `346 
v L "offset" 2 546 "int8" `347 
f B "make8" 2 546 "int8(int32 var,int8 offset)" `345 
f N "make16" 2 547 ""
v L "varhigh" 2 547 "int8" `349 
v L "varlow" 2 547 "int8" `350 
f B "make16" 2 547 "int16(int8 varhigh,int8 varlow)" `348 
f N "make32" 2 548 ""
v L "var1" 2 548 "int16" `352 
f B "make32" 2 548 "int32(int16 var1)" `351 
f N "make32" 2 549 ""
v L "var1" 2 549 "int16" `354 
v L "var2" 2 549 "int16" `355 
f B "make32" 2 549 "int32(int16 var1,int16 var2)" `353 
f N "make32" 2 550 ""
v L "var1" 2 550 "int16" `357 
v L "var2" 2 550 "int8" `358 
f B "make32" 2 550 "int32(int16 var1,int8 var2)" `356 
f N "make32" 2 551 ""
v L "var1" 2 551 "int16" `360 
v L "var2" 2 551 "int8" `361 
v L "var3" 2 551 "int8" `362 
f B "make32" 2 551 "int32(int16 var1,int8 var2,int8 var3)" `359 
f N "make32" 2 552 ""
v L "var1" 2 552 "int8" `364 
f B "make32" 2 552 "int32(int8 var1)" `363 
f N "make32" 2 553 ""
v L "var1" 2 553 "int8" `366 
v L "var2" 2 553 "int8" `367 
f B "make32" 2 553 "int32(int8 var1,int8 var2)" `365 
f N "make32" 2 554 ""
v L "var1" 2 554 "int8" `369 
v L "var2" 2 554 "int8" `370 
v L "var3" 2 554 "int8" `371 
f B "make32" 2 554 "int32(int8 var1,int8 var2,int8 var3)" `368 
f N "make32" 2 555 ""
v L "var1" 2 555 "int8" `373 
v L "var2" 2 555 "int8" `374 
v L "var3" 2 555 "int8" `375 
v L "var4" 2 555 "int8" `376 
f B "make32" 2 555 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `372 
f N "make32" 2 556 ""
v L "var1" 2 556 "int8" `378 
v L "var2" 2 556 "int16" `379 
f B "make32" 2 556 "int32(int8 var1,int16 var2)" `377 
f N "make32" 2 557 ""
v L "var1" 2 557 "int8" `381 
v L "var2" 2 557 "int16" `382 
v L "var3" 2 557 "int8" `383 
f B "make32" 2 557 "int32(int8 var1,int16 var2,int8 var3)" `380 
f N "make32" 2 558 ""
v L "var1" 2 558 "int8" `385 
v L "var2" 2 558 "int8" `386 
v L "var3" 2 558 "int16" `387 
f B "make32" 2 558 "int32(int8 var1,int8 var2,int16 var3)" `384 
f N "bit_set" 2 559 ""
v L "var" 2 559 "int8" `389 
v L "bit" 2 559 "int8" `390 
f B "bit_set" 2 559 "void(int8 var,int8 bit)" `388 
f N "bit_set" 2 560 ""
v L "var" 2 560 "int16" `392 
v L "bit" 2 560 "int8" `393 
f B "bit_set" 2 560 "void(int16 var,int8 bit)" `391 
f N "bit_set" 2 561 ""
v L "var" 2 561 "int32" `395 
v L "bit" 2 561 "int8" `396 
f B "bit_set" 2 561 "void(int32 var,int8 bit)" `394 
f N "bit_clear" 2 562 ""
v L "var" 2 562 "int8" `398 
v L "bit" 2 562 "int8" `399 
f B "bit_clear" 2 562 "void(int8 var,int8 bit)" `397 
f N "bit_clear" 2 563 ""
v L "var" 2 563 "int16" `401 
v L "bit" 2 563 "int8" `402 
f B "bit_clear" 2 563 "void(int16 var,int8 bit)" `400 
f N "bit_clear" 2 564 ""
v L "var" 2 564 "int32" `404 
v L "bit" 2 564 "int8" `405 
f B "bit_clear" 2 564 "void(int32 var,int8 bit)" `403 
f N "bit_test" 2 565 ""
v L "var" 2 565 "int8" `407 
v L "bit" 2 565 "int8" `408 
f B "bit_test" 2 565 "int8(int8 var,int8 bit)" `406 
f N "bit_test" 2 566 ""
v L "var" 2 566 "int16" `410 
v L "bit" 2 566 "int8" `411 
f B "bit_test" 2 566 "int8(int16 var,int8 bit)" `409 
f N "bit_test" 2 567 ""
v L "var" 2 567 "int32" `413 
v L "bit" 2 567 "int8" `414 
f B "bit_test" 2 567 "int8(int32 var,int8 bit)" `412 
f N "bit_set" 2 568 ""
v L "var" 2 568 "?" `416 
v L "bit" 2 568 "int8" `417 
f B "bit_set" 2 568 "void(? var,int8 bit)" `415 
f N "bit_set" 2 569 ""
v L "var" 2 569 "?" `419 
v L "bit" 2 569 "int8" `420 
f B "bit_set" 2 569 "void(? var,int8 bit)" `418 
f N "bit_clear" 2 570 ""
v L "var" 2 570 "?" `422 
v L "bit" 2 570 "int8" `423 
f B "bit_clear" 2 570 "void(? var,int8 bit)" `421 
f N "bit_clear" 2 571 ""
v L "var" 2 571 "?" `425 
v L "bit" 2 571 "int8" `426 
f B "bit_clear" 2 571 "void(? var,int8 bit)" `424 
f N "bit_test" 2 572 ""
v L "var" 2 572 "?" `428 
v L "bit" 2 572 "int8" `429 
f B "bit_test" 2 572 "int8(? var,int8 bit)" `427 
f N "bit_test" 2 573 ""
v L "var" 2 573 "?" `431 
v L "bit" 2 573 "int8" `432 
f B "bit_test" 2 573 "int8(? var,int8 bit)" `430 
f N "bit_first" 2 574 ""
v L "value" 2 574 "int8" `434 
v L "var" 2 574 "int16" `435 
f B "bit_first" 2 574 "int8(int8 value,int16 var)" `433 
f N "bit_last" 2 575 ""
v L "var" 2 575 "sint16" `437 
f B "bit_last" 2 575 "int8(sint16 var)" `436 
f N "bit_last" 2 576 ""
v L "value" 2 576 "int8" `439 
v L "var" 2 576 "sint16" `440 
f B "bit_last" 2 576 "int8(int8 value,sint16 var)" `438  "#use delay() Prototypes:"
f N "delay_cycles" 2 579 ""
v L "count" 2 579 "int16" `442 
f B "delay_cycles" 2 579 "void(int16 count)" `441 
f N "delay_ms" 2 580 ""
v L "time" 2 580 "int16" `444 
f B "delay_ms" 2 580 "void(int16 time)" `443 
f N "delay_us" 2 581 ""
v L "time" 2 581 "int16" `446 
f B "delay_us" 2 581 "void(int16 time)" `445  "#use rs232() Prototypes:"
f N "putchar" 2 584 ""
v L "cdata" 2 584 "sint8" `448 
f B "putchar" 2 584 "void(sint8 cdata)" `447 
f N "putchar" 2 585 ""
v L "cdata" 2 585 "sint8" `450 
v L "stream" 2 585 "int8" `451 
f B "putchar" 2 585 "void(sint8 cdata,int8 stream)" `449 
f N "puts" 2 586 ""
v L "string" 2 586 "*sint8" `453 
f B "puts" 2 586 "void(*sint8 string)" `452 
f N "puts" 2 587 ""
v L "string" 2 587 "*sint8" `455 
v L "stream" 2 587 "int8" `456 
f B "puts" 2 587 "void(*sint8 string,int8 stream)" `454 
f N "getch" 2 588 ""
f B "getch" 2 588 "sint8()" `457 
f N "getch" 2 589 ""
v L "stream" 2 589 "int8" `459 
f B "getch" 2 589 "sint8(int8 stream)" `458 
f N "gets" 2 590 ""
v L "string" 2 590 "*sint8" `461 
f B "gets" 2 590 "void(*sint8 string)" `460 
f N "gets" 2 591 ""
v L "string" 2 591 "*sint8" `463 
v L "stream" 2 591 "int8" `464 
f B "gets" 2 591 "void(*sint8 string,int8 stream)" `462 
f N "kbhit" 2 592 ""
f B "kbhit" 2 592 "int8()" `465 
f N "kbhit" 2 593 ""
v L "stream" 2 593 "int8" `467 
f B "kbhit" 2 593 "int8(int8 stream)" `466 
f N "printf" 2 594 ""
v L "string" 2 594 "*sint8" `469 
f B "printf" 2 594 "void(*sint8 string,*int8 _VA_LIST)" `468 
f N "fprintf" 2 595 ""
v L "stream" 2 595 "int8" `472 
v L "string" 2 595 "*sint8" `473 
f B "fprintf" 2 595 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `471 
f N "putc_send" 2 596 ""
f B "putc_send" 2 596 "void()" `475 
f N "fputc_send" 2 597 ""
v L "stream" 2 597 "int8" `477 
f B "fputc_send" 2 597 "void(int8 stream)" `476 
f N "rcv_buffer_full" 2 598 ""
f B "rcv_buffer_full" 2 598 "int8()" `478 
f N "rcv_buffer_full" 2 599 ""
v L "stream" 2 599 "int8" `480 
f B "rcv_buffer_full" 2 599 "int8(int8 stream)" `479 
f N "rcv_buffer_bytes" 2 600 ""
f B "rcv_buffer_bytes" 2 600 "int16()" `481 
f N "rcv_buffer_bytes" 2 601 ""
v L "stream" 2 601 "int8" `483 
f B "rcv_buffer_bytes" 2 601 "int16(int8 stream)" `482 
f N "tx_buffer_full" 2 602 ""
f B "tx_buffer_full" 2 602 "int8()" `484 
f N "tx_buffer_full" 2 603 ""
v L "stream" 2 603 "int8" `486 
f B "tx_buffer_full" 2 603 "int8(int8 stream)" `485 
f N "tx_buffer_bytes" 2 604 ""
f B "tx_buffer_bytes" 2 604 "int16()" `487 
f N "tx_buffer_bytes" 2 605 ""
v L "stream" 2 605 "int8" `489 
f B "tx_buffer_bytes" 2 605 "int16(int8 stream)" `488  "#use i2c() Prototypes:"
f N "i2c_read" 2 608 ""
f B "i2c_read" 2 608 "int8()" `490 
f N "i2c_read" 2 609 ""
v L "ack" 2 609 "int8" `492 
f B "i2c_read" 2 609 "int8(int8 ack)" `491 
f N "i2c_read" 2 610 ""
v L "stream" 2 610 "int8" `494 
v L "ack" 2 610 "int8" `495 
f B "i2c_read" 2 610 "int8(int8 stream,int8 ack)" `493 
f N "i2c_write" 2 611 ""
v L "data" 2 611 "int8" `497 
f B "i2c_write" 2 611 "int8(int8 data)" `496 
f N "i2c_write" 2 612 ""
v L "stream" 2 612 "int8" `499 
v L "data" 2 612 "int8" `500 
f B "i2c_write" 2 612 "int8(int8 stream,int8 data)" `498 
f N "i2c_start" 2 613 ""
f B "i2c_start" 2 613 "void()" `501 
f N "i2c_start" 2 614 ""
v L "stream" 2 614 "int8" `503 
f B "i2c_start" 2 614 "void(int8 stream)" `502 
f N "i2c_start" 2 615 ""
v L "stream" 2 615 "int8" `505 
v L "restart" 2 615 "int8" `506 
f B "i2c_start" 2 615 "void(int8 stream,int8 restart)" `504 
f N "i2c_stop" 2 616 ""
f B "i2c_stop" 2 616 "void()" `507 
f N "i2c_stop" 2 617 ""
v L "stream" 2 617 "int8" `509 
f B "i2c_stop" 2 617 "void(int8 stream)" `508 
f N "i2c_isr_state" 2 618 ""
f B "i2c_isr_state" 2 618 "sint8()" `510 
f N "i2c_slaveaddr" 2 619 ""
v L "addr" 2 619 "int8" `512 
f B "i2c_slaveaddr" 2 619 "void(int8 addr)" `511 
f N "i2c_slaveaddr" 2 620 ""
v L "stream" 2 620 "int8" `514 
v L "addr" 2 620 "int8" `515 
f B "i2c_slaveaddr" 2 620 "void(int8 stream,int8 addr)" `513 
f N "i2c_poll" 2 621 ""
f B "i2c_poll" 2 621 "int8()" `516 
f N "i2c_poll" 2 622 ""
v L "stream" 2 622 "int8" `518 
f B "i2c_poll" 2 622 "int8(int8 stream)" `517 
f N "i2c_init" 2 623 ""
v L "baud" 2 623 "int32" `520 
f B "i2c_init" 2 623 "void(int32 baud)" `519 
f N "i2c_init" 2 624 ""
v L "stream" 2 624 "int8" `522 
v L "baud" 2 624 "int32" `523 
f B "i2c_init" 2 624 "void(int8 stream,int32 baud)" `521  "#use spi() Prototypes:"
f N "spi_xfer" 2 627 ""
f B "spi_xfer" 2 627 "int8()" `524 
f N "spi_xfer" 2 628 ""
f G "spi_xfer" 2 628 "int16()" `525 
f N "spi_xfer" 2 629 ""
f G "spi_xfer" 2 629 "int32()" `525 
f N "spi_xfer" 2 630 ""
v L "data" 2 630 "int8" `526 
f B "spi_xfer" 2 630 "int8(int8 data)" `525 
f N "spi_xfer" 2 631 ""
v L "data" 2 631 "int16" `528 
f B "spi_xfer" 2 631 "int16(int16 data)" `527 
f N "spi_xfer" 2 632 ""
v L "data" 2 632 "int32" `530 
f B "spi_xfer" 2 632 "int32(int32 data)" `529 
f N "spi_xfer" 2 633 ""
v L "stream" 2 633 "int8" `532 
v L "data" 2 633 "int8" `533 
f B "spi_xfer" 2 633 "int8(int8 stream,int8 data)" `531 
f N "spi_xfer" 2 634 ""
v L "stream" 2 634 "int8" `535 
v L "data" 2 634 "int16" `536 
f B "spi_xfer" 2 634 "int16(int8 stream,int16 data)" `534 
f N "spi_xfer" 2 635 ""
v L "stream" 2 635 "int8" `538 
v L "data" 2 635 "int32" `539 
f B "spi_xfer" 2 635 "int32(int8 stream,int32 data)" `537 
f N "spi_xfer" 2 636 ""
v L "stream" 2 636 "int8" `541 
v L "data" 2 636 "int8" `542 
v L "bits" 2 636 "int8" `543 
f B "spi_xfer" 2 636 "int8(int8 stream,int8 data,int8 bits)" `540 
f N "spi_xfer" 2 637 ""
v L "stream" 2 637 "int8" `545 
v L "data" 2 637 "int16" `546 
v L "bits" 2 637 "int8" `547 
f B "spi_xfer" 2 637 "int16(int8 stream,int16 data,int8 bits)" `544 
f N "spi_xfer" 2 638 ""
v L "stream" 2 638 "int8" `549 
v L "data" 2 638 "int32" `550 
v L "bits" 2 638 "int8" `551 
f B "spi_xfer" 2 638 "int32(int8 stream,int32 data,int8 bits)" `548 
f N "spi_init" 2 639 ""
v L "baud" 2 639 "int32" `553 
f B "spi_init" 2 639 "void(int32 baud)" `552 
f N "spi_init" 2 640 ""
v L "stream" 2 640 "int8" `555 
v L "baud" 2 640 "int32" `556 
f B "spi_init" 2 640 "void(int8 stream,int32 baud)" `554 
f N "spi_speed" 2 641 ""
v L "baud" 2 641 "int32" `558 
f B "spi_speed" 2 641 "void(int32 baud)" `557 
f N "spi_speed" 2 642 ""
v L "stream" 2 642 "int8" `560 
v L "baud" 2 642 "int32" `561 
f B "spi_speed" 2 642 "void(int8 stream,int32 baud)" `559 
f N "spi_speed" 2 643 ""
v L "stream" 2 643 "int8" `563 
v L "baud" 2 643 "int32" `564 
v L "clock" 2 643 "int32" `565 
f B "spi_speed" 2 643 "void(int8 stream,int32 baud,int32 clock)" `562 
f N "spi_prewrite" 2 644 ""
v L "data" 2 644 "int8" `567 
f B "spi_prewrite" 2 644 "void(int8 data)" `566 
f N "spi_prewrite" 2 645 ""
v L "data" 2 645 "int16" `569 
f B "spi_prewrite" 2 645 "void(int16 data)" `568 
f N "spi_prewrite" 2 646 ""
v L "data" 2 646 "int32" `571 
f B "spi_prewrite" 2 646 "void(int32 data)" `570 
f N "spi_prewrite" 2 647 ""
v L "??65535" 2 647 "int8" `573 
v L "data" 2 647 "int8" `574 
f B "spi_prewrite" 2 647 "void(int8 ,int8 data)" `572 
f N "spi_prewrite" 2 648 ""
v L "??65535" 2 648 "int8" `576 
v L "data" 2 648 "int16" `577 
f B "spi_prewrite" 2 648 "void(int8 ,int16 data)" `575 
f N "spi_prewrite" 2 649 ""
v L "??65535" 2 649 "int8" `579 
v L "data" 2 649 "int32" `580 
f B "spi_prewrite" 2 649 "void(int8 ,int32 data)" `578 
f N "spi_xfer_in" 2 650 ""
f B "spi_xfer_in" 2 650 "int8()" `581 
f N "spi_xfer_in" 2 651 ""
f G "spi_xfer_in" 2 651 "int16()" `582 
f N "spi_xfer_in" 2 652 ""
f G "spi_xfer_in" 2 652 "int32()" `582 
f N "spi_xfer_in" 2 653 ""
v L "bits" 2 653 "int8" `583 
f B "spi_xfer_in" 2 653 "int8(int8 bits)" `582 
f N "spi_xfer_in" 2 654 ""
v L "bits" 2 654 "int8" `585 
f G "spi_xfer_in" 2 654 "int16(int8 bits)" `584 
f N "spi_xfer_in" 2 655 ""
v L "bits" 2 655 "int8" `585 
f G "spi_xfer_in" 2 655 "int32(int8 bits)" `584 
f N "spi_xfer_in" 2 656 ""
v L "stream" 2 656 "int8" `585 
v L "bits" 2 656 "int8" `586 
f B "spi_xfer_in" 2 656 "int8(int8 stream,int8 bits)" `584 
f N "spi_xfer_in" 2 657 ""
v L "stream" 2 657 "int8" `585 
v L "bits" 2 657 "int8" `589 
f G "spi_xfer_in" 2 657 "int16(int8 stream,int8 bits)" `587 
f N "spi_xfer_in" 2 658 ""
v L "stream" 2 658 "int8" `585 
v L "bits" 2 658 "int8" `589 
f G "spi_xfer_in" 2 658 "int32(int8 stream,int8 bits)" `587  "#use rtos() Prototypes:"
f N "rtos_run" 2 661 ""
f B "rtos_run" 2 661 "void(int8 stream,int8 bits)" `587 
f N "rtos_yield" 2 662 ""
f B "rtos_yield" 2 662 "void(int8 bits)" `588 
f N "rtos_enable" 2 663 ""
v L "task" 2 663 "int8" `590 
f B "rtos_enable" 2 663 "void(int8 task)" `589 
f N "rtos_disable" 2 664 ""
v L "task" 2 664 "int8" `592 
f B "rtos_disable" 2 664 "void(int8 task)" `591 
f N "rtos_terminate" 2 665 ""
f B "rtos_terminate" 2 665 "void()" `593 
f N "rtos_await" 2 666 ""
v L "flag" 2 666 "int8" `595 
f B "rtos_await" 2 666 "void(int8 flag)" `594 
f N "rtos_wait" 2 667 ""
v L "sem" 2 667 "int8" `597 
f B "rtos_wait" 2 667 "void(int8 sem)" `596 
f N "rtos_signal" 2 668 ""
v L "sem" 2 668 "int8" `599 
f B "rtos_signal" 2 668 "void(int8 sem)" `598 
f N "rtos_msg_send" 2 669 ""
v L "task" 2 669 "int8" `601 
v L "msg" 2 669 "int8" `602 
f B "rtos_msg_send" 2 669 "void(int8 task,int8 msg)" `600 
f N "rtos_msg_read" 2 670 ""
f B "rtos_msg_read" 2 670 "int8()" `603 
f N "rtos_msg_poll" 2 671 ""
f B "rtos_msg_poll" 2 671 "int8()" `604 
f N "rtos_overrun" 2 672 ""
v L "task" 2 672 "int8" `606 
f B "rtos_overrun" 2 672 "int8(int8 task)" `605 
f N "rtos_stats" 2 673 ""
v L "task" 2 673 "int8" `608 
v L "stat" 2 673 "*int8" `609 
f B "rtos_stats" 2 673 "void(int8 task,*int8 stat)" `607  "#use timer() Prototypes:"
f N "get_ticks" 2 676 ""
f B "get_ticks" 2 676 "int8()" `610 
f N "get_ticks" 2 677 ""
f G "get_ticks" 2 677 "int16()" `611 
f N "get_ticks" 2 678 ""
f G "get_ticks" 2 678 "int32()" `611 
f N "get_ticks" 2 679 ""
f G "get_ticks" 2 679 "?()" `611 
f N "get_ticks" 2 680 ""
v L "stream" 2 680 "int8" `612 
f B "get_ticks" 2 680 "int8(int8 stream)" `611 
f N "get_ticks" 2 681 ""
v L "stream" 2 681 "int8" `614 
f G "get_ticks" 2 681 "int16(int8 stream)" `613 
f N "get_ticks" 2 682 ""
v L "stream" 2 682 "int8" `614 
f G "get_ticks" 2 682 "int32(int8 stream)" `613 
f N "get_ticks" 2 683 ""
v L "stream" 2 683 "int8" `614 
f G "get_ticks" 2 683 "?(int8 stream)" `613 
f N "set_ticks" 2 684 ""
v L "value" 2 684 "int8" `614 
f B "set_ticks" 2 684 "void(int8 value)" `613 
f N "set_ticks" 2 685 ""
v L "value" 2 685 "int16" `616 
f B "set_ticks" 2 685 "void(int16 value)" `615 
f N "set_ticks" 2 686 ""
v L "value" 2 686 "int32" `618 
f B "set_ticks" 2 686 "void(int32 value)" `617 
f N "set_ticks" 2 687 ""
v L "value" 2 687 "?" `620 
f B "set_ticks" 2 687 "void(? value)" `619 
f N "set_ticks" 2 688 ""
v L "stream" 2 688 "int8" `622 
v L "value" 2 688 "int8" `623 
f B "set_ticks" 2 688 "void(int8 stream,int8 value)" `621 
f N "set_ticks" 2 689 ""
v L "stream" 2 689 "int8" `625 
v L "value" 2 689 "int16" `626 
f B "set_ticks" 2 689 "void(int8 stream,int16 value)" `624 
f N "set_ticks" 2 690 ""
v L "stream" 2 690 "int8" `628 
v L "value" 2 690 "int32" `629 
f B "set_ticks" 2 690 "void(int8 stream,int32 value)" `627 
f N "set_ticks" 2 691 ""
v L "stream" 2 691 "int8" `631 
v L "value" 2 691 "?" `632 
f B "set_ticks" 2 691 "void(int8 stream,? value)" `630  "#use pwm() Prototypes:"
f N "pwm_on" 2 694 ""
f B "pwm_on" 2 694 "void()" `633 
f N "pwm_on" 2 695 ""
v L "stream" 2 695 "int8" `635 
f B "pwm_on" 2 695 "void(int8 stream)" `634 
f N "pwm_off" 2 696 ""
f B "pwm_off" 2 696 "void()" `636 
f N "pwm_off" 2 697 ""
v L "stream" 2 697 "int8" `638 
f B "pwm_off" 2 697 "void(int8 stream)" `637 
f N "pwm_set_duty" 2 698 ""
v L "duty" 2 698 "int16" `640 
f B "pwm_set_duty" 2 698 "void(int16 duty)" `639 
f N "pwm_set_duty" 2 699 ""
v L "stream" 2 699 "int8" `642 
v L "duty" 2 699 "int16" `643 
f B "pwm_set_duty" 2 699 "void(int8 stream,int16 duty)" `641 
f N "pwm_set_duty_percent" 2 700 ""
v L "percent" 2 700 "int16" `645 
f B "pwm_set_duty_percent" 2 700 "void(int16 percent)" `644 
f N "pwm_set_duty_percent" 2 701 ""
v L "stream" 2 701 "int8" `647 
v L "percent" 2 701 "int16" `648 
f B "pwm_set_duty_percent" 2 701 "void(int8 stream,int16 percent)" `646 
f N "pwm_set_frequency" 2 702 ""
v L "frequency" 2 702 "int32" `650 
f B "pwm_set_frequency" 2 702 "void(int32 frequency)" `649 
f N "pwm_set_frequency" 2 703 ""
v L "stream" 2 703 "int8" `652 
v L "frequency" 2 703 "int32" `653 
f B "pwm_set_frequency" 2 703 "void(int8 stream,int32 frequency)" `651  "#use capture() Prototypes:"
f N "get_capture_time" 2 706 ""
f B "get_capture_time" 2 706 "int16()" `654 
f N "get_capture_time" 2 707 ""
v L "stream" 2 707 "int8" `656 
f B "get_capture_time" 2 707 "int16(int8 stream)" `655 
f N "get_capture_event" 2 708 ""
f B "get_capture_event" 2 708 "int8()" `657 
f N "get_capture_event" 2 709 ""
v L "stream" 2 709 "int8" `659 
f B "get_capture_event" 2 709 "int8(int8 stream)" `658  "Environment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 718 ""
v L "address" 2 718 "int16" `661 
f B "goto_address" 2 718 "void(int16 address)" `660 
f N "label_address" 2 719 ""
v L "label" 2 719 "int16" `663 
f B "label_address" 2 719 "int16(int16 label)" `662  "Program Memory Prototypes:"
f N "read_program_memory" 2 722 ""
v L "address" 2 722 "int16" `665 
v L "dataptr" 2 722 "*int8" `666 
v L "count" 2 722 "int16" `667 
f B "read_program_memory" 2 722 "void(int16 address,*int8 dataptr,int16 count)" `664 
f N "erase_program_memory" 2 723 ""
v L "address" 2 723 "int16" `669 
f B "erase_program_memory" 2 723 "void(int16 address)" `668 
f N "write_program_memory" 2 724 ""
v L "address" 2 724 "int16" `671 
v L "dataptr" 2 724 "*int8" `672 
v L "count" 2 724 "int16" `673 
f B "write_program_memory" 2 724 "void(int16 address,*int8 dataptr,int16 count)" `670 
f N "read_configuration_memory" 2 725 ""
v L "dataptr" 2 725 "*int8" `675 
v L "count" 2 725 "int8" `676 
f B "read_configuration_memory" 2 725 "void(*int8 dataptr,int8 count)" `674 
f N "write_configuration_memory" 2 726 ""
v L "dataptr" 2 726 "*int8" `678 
v L "count" 2 726 "int8" `679 
f B "write_configuration_memory" 2 726 "void(*int8 dataptr,int8 count)" `677  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 731 "unsigned int16"
f N "read_eeprom" 2 736 ""
v L "address" 2 736 "int16" `681 
f B "read_eeprom" 2 736 "int16(int16 address)" `680 
f N "read_eeprom" 2 737 ""
v L "address" 2 737 "int16" `683 
v L "bytes" 2 737 "int8" `684 
f B "read_eeprom" 2 737 "int16(int16 address,int8 bytes)" `682 
f N "read_eeprom" 2 738 ""
v L "address" 2 738 "int16" `686 
v L "dataptr" 2 738 "*int8" `687 
v L "bytes" 2 738 "int16" `688 
f B "read_eeprom" 2 738 "void(int16 address,*int8 dataptr,int16 bytes)" `685 
f N "write_eeprom" 2 739 ""
v L "address" 2 739 "int16" `690 
v L "value" 2 739 "int16" `691 
f B "write_eeprom" 2 739 "void(int16 address,int16 value)" `689 
f N "write_eeprom" 2 740 ""
v L "address" 2 740 "int16" `693 
v L "dataptr" 2 740 "*int8" `694 
v L "bytes" 2 740 "int16" `695 
f B "write_eeprom" 2 740 "void(int16 address,*int8 dataptr,int16 bytes)" `692  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 747 ""
v L "interrupt" 2 747 "int16" `697 
f B "enable_interrupts" 2 747 "void(int16 interrupt)" `696 
f N "disable_interrupts" 2 748 ""
v L "interrupt" 2 748 "int16" `699 
f B "disable_interrupts" 2 748 "void(int16 interrupt)" `698 
f N "clear_interrupt" 2 749 ""
v L "interrupt" 2 749 "int16" `701 
f B "clear_interrupt" 2 749 "void(int16 interrupt)" `700 
f N "interrupt_active" 2 750 ""
v L "interrupt" 2 750 "int16" `703 
f B "interrupt_active" 2 750 "int8(int16 interrupt)" `702 
f N "interrupt_enabled" 2 751 ""
v L "interrupt" 2 751 "int16" `705 
f B "interrupt_enabled" 2 751 "int8(int16 interrupt)" `704 
f N "ext_int_edge" 2 752 ""
v L "source" 2 752 "int8" `707 
v L "edge" 2 752 "int8" `708 
f B "ext_int_edge" 2 752 "void(int8 source,int8 edge)" `706 
f N "jump_to_isr" 2 753 ""
v L "address" 2 753 "int16" `710 
f B "jump_to_isr" 2 753 "void(int16 address)" `709  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 755 "0x40"
d G "H_TO_L" 2 756 "0"
d G "INTR_GLOBAL" 2 759 "0x400"
d G "GLOBAL" 2 760 "0x400" "For compatibility with PIC16/18"
d G "INTR_NORMAL" 2 761 "0x100	"
d G "INTR_ALTERNATE" 2 762 "0x200"
d G "INTR_LEVEL0" 2 763 "0x500"
d G "INTR_LEVEL1" 2 764 "0x501"
d G "INTR_LEVEL2" 2 765 "0x502"
d G "INTR_LEVEL3" 2 766 "0x503"
d G "INTR_LEVEL4" 2 767 "0x504"
d G "INTR_LEVEL5" 2 768 "0x505"
d G "INTR_LEVEL6" 2 769 "0x506"
d G "INTR_LEVEL7" 2 770 "0x507"
d G "INTR_CN_PIN" 2 772 "0x8000" "or in a PIN_xx constant (enable/disable only)"
d G "INT_OSCFAIL" 2 774 "1"
d G "INT_ADDRERR" 2 775 "2"
d G "INT_STACKERR" 2 776 "3"
d G "INT_MATHERR" 2 777 "4"
d G "INT_DMAERR" 2 778 "5"
d G "INT_EXT0" 2 779 "6"
d G "INT_IC1" 2 780 "7"
d G "INT_OC1" 2 781 "8"
d G "INT_TIMER1" 2 782 "9"
d G "INT_IC2" 2 783 "10"
d G "INT_OC2" 2 784 "11"
d G "INT_TIMER2" 2 785 "12"
d G "INT_TIMER3" 2 786 "13"
d G "INT_SPI1" 2 787 "14"
d G "INT_RDA" 2 788 "15"
d G "INT_TBE" 2 789 "16"
d G "INT_ADC1" 2 790 "17"
d G "INT_EEPROM" 2 791 "18"
d G "INT_SI2C" 2 792 "19"
d G "INT_MI2C" 2 793 "20"
d G "INT_CNI" 2 794 "21"
d G "INT_EXT1" 2 795 "22"
d G "INT_IC7" 2 796 "24"
d G "INT_IC8" 2 797 "25"
d G "INT_EXT2" 2 798 "35"
d G "INT_EXT3" 2 799 "53"
d G "INT_PWM1" 2 800 "58"
d G "INT_QEI" 2 801 "60"
d G "INT_FAULTA" 2 802 "66"
D G "LED" 1 10 "PIN_B5"
D G "DELAY" 1 11 "1000"
F N "main" 0 4 ""
F G "main" 0 5 "void()" `715  "Example blinking LED program"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "dsp_a" 1 2
F B "dsp_b" 1 2
F B "read_eeprom" 1 3
F B "write_eeprom" 2 3
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "set_pullup" 1 2
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "pll_locked" 0 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "set_analog_pins" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_qei" 1 4
F B "qei_set_count" 1 2
F B "qei_get_count" 0 1
F B "qei_status" 0 1
F B "setup_motor_pwm" 2 5
F B "set_motor_unit" 5 0
F B "set_motor_pwm_duty" 3 0
F B "set_motor_pwm_event" 2 0
F B "get_motor_pwm_count" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
